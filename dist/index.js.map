{"version":3,"sources":["../node_modules/vector_class/src/Vector2D.ts","../node_modules/vector_class/src/Vector3D.ts","../node_modules/vector_class/src/index.ts","Camera.ts","Properties.ts","graphics/Graphic.ts","Media/Video.ts","Events/CircleEvents.ts","Media/Picture.ts","Scene.ts","Render.ts","LinearGradient.ts","Color.ts","Media/Animation.ts","graphics/Ellipse.ts","graphics/Poligon.ts","graphics/Circle.ts","graphics/Rect.ts","graphics/Line.ts","graphics/Text.ts","graphics/Arc.ts","graphics/BezierCurve.ts","graphics/QuadraticCurve.ts","Events/Event.ts","Events/Mouse.ts","Events/KeyBoard.ts","index.ts"],"names":[],"mappings":";mCAAA,IAAA,EAAA,WAIE,SAAA,EAAa,EAAe,QAAf,IAAA,IAAA,EAAA,QAAe,IAAA,IAAA,EAAA,GAC1B,KAAK,EAAI,EACT,KAAK,EAAI,EAkIb,OA/HE,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,GAGnB,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,GAGnB,EAAA,UAAA,KAAA,SAAM,GACJ,KAAK,GAAK,EACV,KAAK,GAAK,GAGZ,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EACV,KAAK,GAAK,GAGZ,EAAA,UAAA,QAAA,WACE,KAAK,IAAM,EACX,KAAK,IAAM,GAGb,EAAA,UAAA,IAAA,WACE,OAAO,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,IAGnD,EAAA,UAAA,IAAA,SAAK,GACH,OAAO,KAAK,EAAI,EAAO,EAAI,KAAK,EAAI,EAAO,GAG7C,EAAA,UAAA,SAAA,SAAU,GACR,OAAO,EAAO,IAAI,KAAM,GAAQ,OAGlC,EAAA,UAAA,MAAA,WACE,OAAO,KAAK,MAAM,KAAK,EAAG,KAAK,IAGjC,EAAA,UAAA,KAAA,WACE,OAAO,IAAI,EAAO,KAAK,EAAG,KAAK,IAGjC,EAAA,UAAA,UAAA,WACE,KAAK,IAAI,KAAK,QAGhB,EAAA,UAAA,OAAA,SAAQ,GACN,KAAK,YACL,KAAK,KAAK,IAGZ,EAAA,UAAA,SAAA,SAAU,GACR,IAAM,EAAY,KAAK,MAEvB,KAAK,EAAI,EAAY,KAAK,IAAI,GAC9B,KAAK,EAAK,EAAY,KAAK,IAAI,IAGjC,EAAA,UAAA,SAAA,SAAU,GACR,KAAK,SAAS,KAAK,QAAU,IAG/B,EAAA,UAAA,MAAA,SAAO,GACD,KAAK,MAAQ,GACf,KAAK,OAAO,IAIhB,EAAA,UAAA,YAAA,SAAa,EAAgB,EAAmB,GAC9C,QAD2B,IAAA,IAAA,EAAA,QAAmB,IAAA,IAAA,EAAA,GAC1C,KAAK,SAAS,GAAU,EAAM,CAChC,IAAM,EAAO,EAAO,UAAU,EAAO,IAAI,EAAQ,OACjD,EAAK,KAAK,GACV,KAAK,IAAI,KAIb,EAAA,UAAA,KAAA,WACE,KAAK,EAAI,EACT,KAAK,EAAI,GAGJ,EAAA,IAAP,SAAY,EAAiB,GAC3B,OAAO,IAAI,EAAO,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,IAGxD,EAAA,IAAP,SAAY,EAAiB,GAC3B,OAAO,IAAI,EAAO,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,IAGxD,EAAA,KAAP,SAAa,EAAgB,GAC3B,OAAO,IAAI,EAAO,EAAO,EAAI,EAAQ,EAAO,EAAI,IAG3C,EAAA,IAAP,SAAY,EAAgB,GAC1B,OAAO,IAAI,EAAO,EAAO,EAAI,EAAQ,EAAO,EAAI,IAG3C,EAAA,QAAP,SAAgB,GACd,OAAO,IAAI,GAAmB,EAAZ,EAAO,GAAoB,EAAZ,EAAO,IAGnC,EAAA,SAAP,SAAiB,EAAiB,GAChC,OAAO,KAAK,IAAI,EAAS,GAAS,OAG7B,EAAA,UAAP,SAAkB,GAChB,OAAO,KAAK,IAAI,EAAQ,EAAO,QAG1B,EAAA,MAAP,SAAc,EAAiB,GAC7B,OAAO,EAAQ,EAAI,EAAQ,EAAI,EAAQ,EAAI,EAAQ,GAG9C,EAAA,QAAP,SAAgB,EAAW,GACzB,OAAO,IAAI,EAAO,EAAI,KAAK,SAAU,EAAI,KAAK,WAGzC,EAAA,OAAP,SAAe,EAAe,QAAf,IAAA,IAAA,EAAA,QAAe,IAAA,IAAA,EAAA,GAC5B,IAAI,EAAK,EACL,EAAK,EAGT,OAFI,KAAK,SAAW,KAAK,GAAM,GAC3B,KAAK,SAAW,KAAK,GAAM,GACxB,IAAI,EAAO,EAAI,KAAK,SAAW,EAAI,EAAI,KAAK,SAAW,IAElE,EAxIA,GA0IA,QAAA,QAAe;;mCCzIf,IAAA,EAAA,WAKE,SAAA,EAAa,EAAW,EAAW,GACjC,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EAoIb,OAjIE,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,GAGnB,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,EACjB,KAAK,GAAK,EAAO,GAGnB,EAAA,UAAA,KAAA,SAAM,GACJ,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,GAAK,GAGZ,EAAA,UAAA,IAAA,SAAK,GACH,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,GAAK,GAGZ,EAAA,UAAA,QAAA,WACE,KAAK,IAAM,EACX,KAAK,IAAM,EACX,KAAK,IAAM,GAGb,EAAA,UAAA,IAAA,WACE,OAAO,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,IAGrE,EAAA,UAAA,IAAA,SAAK,GACH,OAAO,KAAK,EAAI,EAAO,EAAI,KAAK,EAAI,EAAO,EAAI,KAAK,EAAI,EAAO,GAGjE,EAAA,UAAA,SAAA,SAAU,GACR,OAAO,EAAS,IAAI,KAAM,GAAQ,OAGpC,EAAA,UAAA,MAAA,WACE,OAAO,KAAK,MAAM,KAAK,EAAG,KAAK,IAGjC,EAAA,UAAA,KAAA,WACE,OAAO,IAAI,EAAS,KAAK,EAAG,KAAK,EAAG,KAAK,IAG3C,EAAA,UAAA,UAAA,WACE,KAAK,IAAI,KAAK,QAGhB,EAAA,UAAA,OAAA,SAAQ,GACN,KAAK,YACL,KAAK,KAAK,IAGZ,EAAA,UAAA,SAAA,SAAU,GACR,IAAM,EAAY,KAAK,MAEvB,KAAK,EAAI,EAAY,KAAK,IAAI,GAC9B,KAAK,EAAK,EAAY,KAAK,IAAI,IAGjC,EAAA,UAAA,SAAA,SAAU,GACR,KAAK,SAAS,KAAK,QAAU,IAG/B,EAAA,UAAA,MAAA,SAAO,GACD,KAAK,MAAQ,GACf,KAAK,OAAO,IAIhB,EAAA,UAAA,YAAA,SAAa,EAAkB,EAAe,GAC5C,GAAI,KAAK,SAAS,GAAU,EAAM,CAChC,IAAM,EAAO,EAAS,UAAU,GAChC,EAAK,KAAK,GACV,KAAK,IAAI,KAIb,EAAA,UAAA,KAAA,WACE,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,GAGJ,EAAA,IAAP,SAAY,EAAmB,GAC7B,OAAO,IAAI,EAAS,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,IAGjF,EAAA,IAAP,SAAY,EAAmB,GAC7B,OAAO,IAAI,EAAS,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,EAAG,EAAQ,EAAI,EAAQ,IAGjF,EAAA,KAAP,SAAa,EAAkB,GAC7B,OAAO,IAAI,EAAS,EAAO,EAAI,EAAQ,EAAO,EAAI,EAAQ,EAAO,EAAI,IAGhE,EAAA,IAAP,SAAY,EAAkB,GAC5B,OAAO,IAAI,EAAS,EAAO,EAAI,EAAQ,EAAO,EAAI,EAAQ,EAAO,EAAI,IAGhE,EAAA,QAAP,SAAgB,GACd,OAAO,IAAI,GAAqB,EAAZ,EAAO,GAAoB,EAAZ,EAAO,GAAoB,EAAZ,EAAO,IAGpD,EAAA,SAAP,SAAiB,EAAmB,GAClC,OAAO,KAAK,IAAI,EAAS,GAAS,OAG7B,EAAA,UAAP,SAAkB,GAChB,OAAO,KAAK,IAAI,EAAQ,EAAO,QAG1B,EAAA,MAAP,SAAc,EAAmB,GAC/B,OAAO,EAAQ,EAAI,EAAQ,EAAI,EAAQ,EAAI,EAAQ,GAG9C,EAAA,OAAP,SAAe,EAAW,EAAW,GACnC,OAAI,KAAK,SAAW,GACX,IAAI,EAAS,EAAI,KAAK,SAAU,EAAI,KAAK,SAAU,EAAI,KAAK,UAE5D,IAAI,GAAU,EAAI,KAAK,UAAW,EAAI,KAAK,UAAW,EAAI,KAAK,WAG5E,EA5IA,GA8IA,QAAA,QAAe;;uHC9If,IAAA,EAAA,EAAA,QAAA,eAIE,QAAA,SAJK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,eAIE,QAAA,SAJK,EAAA;;ACmHP,aAAA,QAAA,YAAA,EArHA,IAAA,EAAA,QAAA,gBAGA,EAAA,QAAA,WAEA,EAAA,WAaE,SAAA,EAAa,GAXN,KAAA,OAAS,CAAE,GAAI,IAAK,KAAM,IAAK,KAAM,IAAK,MAAO,KACjD,KAAA,SAAqB,IAAI,EAAA,SAAS,EAAG,GAEpC,KAAA,cAA0B,IAAI,EAAA,SAAS,EAAG,GAC1C,KAAA,YAAsB,EACtB,KAAA,YAAsB,EACtB,KAAA,qBAA+B,EAC/B,KAAA,SAAqB,IAAI,EAAA,SAAS,EAAG,GACrC,KAAA,aAAyB,IAAI,EAAA,SAAS,EAAG,GACzC,KAAA,SAAmB,GAGpB,KAAA,QAAU,EAgGnB,OA7FE,EAAA,UAAA,SAAA,SAAS,GACF,KAAA,aAAa,IAAI,IAUxB,EAAA,UAAA,SAAA,WACS,OAAA,EAAA,SAAS,IAAI,EAAA,MAAM,SAAU,KAAK,WAG3C,EAAA,UAAA,oBAAA,aAIA,EAAA,UAAA,mBAAA,WAAA,IAAA,EAAA,KACO,KAAA,qBAAsB,EAC3B,SAAS,iBAAiB,WAAY,SAAC,GACjC,EAAE,IAAI,gBAAkB,EAAK,OAAO,IACtC,EAAK,SAAS,IAAI,EAAA,SAAS,EAAG,KAE5B,EAAE,IAAI,gBAAkB,EAAK,OAAO,MACtC,EAAK,SAAS,IAAI,EAAA,SAAS,GAAI,KAE7B,EAAE,IAAI,gBAAkB,EAAK,OAAO,MACtC,EAAK,SAAS,IAAI,EAAA,SAAS,GAAI,IAE7B,EAAE,IAAI,gBAAkB,EAAK,OAAO,OACtC,EAAK,SAAS,IAAI,EAAA,UAAU,GAAI,OAKtC,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,iBAAmB,EAAQ,SAC3B,KAAA,cAAgB,KAAK,iBAAiB,OACtC,KAAA,YAAa,EACb,KAAA,YAAa,GAGpB,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,iBAAmB,EAAQ,SAC3B,KAAA,YAAa,GAGpB,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,iBAAmB,EAAQ,SAC3B,KAAA,YAAa,GAGpB,EAAA,UAAA,cAAA,WACO,KAAA,YAAa,EACb,KAAA,YAAa,GAGpB,EAAA,UAAA,eAAA,WACO,KAAA,YAAa,GAGpB,EAAA,UAAA,eAAA,WACO,KAAA,YAAa,GAGpB,EAAA,UAAA,KAAA,SAAK,EAAiB,GACf,KAAA,QAAQ,UAAU,EAAM,EAAG,EAAM,GACjC,KAAA,QAAQ,MAAM,EAAQ,EAAG,EAAQ,GACjC,KAAA,QAAQ,WAAW,EAAM,GAAI,EAAM,IAG1C,EAAA,UAAA,UAAA,SAAU,EAAW,GACd,KAAA,SAAS,GAAK,EACd,KAAA,SAAS,GAAK,EACd,KAAA,QAAQ,UAAU,EAAG,IAG5B,EAAA,UAAA,OAAA,WAQM,GAPA,KAAK,sBACF,KAAA,SAAS,IAAI,KAAK,cAClB,KAAA,SAAS,KAAK,KAAK,UACnB,KAAA,UAAU,KAAK,SAAS,EAAG,KAAK,SAAS,GACzC,KAAA,SAAS,IAAI,KAAK,UAClB,KAAA,aAAa,QAEhB,KAAK,YAAc,KAAK,WAAY,CAChC,IAAA,EAAS,EAAA,SAAS,IAAI,KAAK,cAAe,KAAK,kBAChD,KAAA,cAAgB,KAAK,iBAAiB,OACtC,KAAA,UAAU,EAAO,EAAG,EAAO,KAGtC,EA9GA,GAgHA,QAAA,QAAe;;AClGf,aAnBA,IAAY,EAMA,EAMA,EAOA,EAAZ,QAAA,YAAA,EAnBA,SAAY,GACV,EAAA,KAAA,OACA,EAAA,OAAA,SACA,EAAA,MAAA,QAHF,CAAY,EAAA,QAAA,UAAA,QAAA,QAAO,KAMnB,SAAY,GACV,EAAA,MAAA,QACA,EAAA,MAAA,QACA,EAAA,MAAA,QAHF,CAAY,EAAA,QAAA,WAAA,QAAA,SAAQ,KAMpB,SAAY,GACV,EAAA,OAAA,SACA,EAAA,SAAA,WACA,EAAA,SAAA,WACA,EAAA,UAAA,YAJF,CAAY,EAAA,QAAA,UAAA,QAAA,QAAO,KAOnB,SAAY,GACV,EAAA,QAAA,UACA,EAAA,OAAA,SACA,EAAA,OAAA,SACA,EAAA,KAAA,OAJF,CAAY,EAAA,QAAA,UAAA,QAAA,QAAO;;AC0GnB,aAAA,QAAA,YAAA,EA7HA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,iBAEA,EAAA,WA0BE,SAAA,EAAY,GAzBL,KAAA,OAAkB,EAAA,QAAQ,OAG1B,KAAA,MAAgB,EAChB,KAAA,QAAkB,EAClB,KAAA,OAAmB,IAAI,EAAA,SAAS,GAAK,IACrC,KAAA,SAAqB,IAAI,EAAA,SAAS,EAAG,GACrC,KAAA,MAAgB,OAChB,KAAA,OAAiB,QACjB,KAAA,QAAkB,EAAA,QAAQ,MAC1B,KAAA,SAAmB,EAAA,SAAS,MAC5B,KAAA,UAAoB,eACpB,KAAA,UAAoB,SACpB,KAAA,YAAsB,mBACtB,KAAA,aAAuB,SACvB,KAAA,KAAe,GACf,KAAA,SAAmB,EACnB,KAAA,QAAkB,EAClB,KAAA,UAAoB,EACpB,KAAA,WAAqB,GACrB,KAAA,WAAqB,EACrB,KAAA,cAAwB,EACxB,KAAA,cAAwB,EACxB,KAAA,OAAqB,GAGtB,SACkB,IAAhB,EAAK,OACoB,kBAAhB,EAAK,OACT,KAAA,OAAS,EAAK,OAEnB,QAAQ,KAAK,iCAGV,KAAA,QAAS,OAEE,IAAd,EAAK,KACkB,kBAAd,EAAK,KACT,KAAA,KAAO,EAAK,KAEjB,QAAQ,KAAK,+BAGV,KAAA,MAAO,EAET,KAAA,OAAS,EAAK,QAAU,EAAK,QAAU,EAAA,QAAQ,OAC/C,KAAA,OAAS,EAAK,OAAS,EAAK,OAAS,IAAI,EAAA,SAAS,GAAK,IACvD,KAAA,SAAW,EAAK,SAAW,EAAK,SAAW,IAAI,EAAA,SAAS,EAAG,GAC3D,KAAA,QAAU,EAAK,QAAU,EAAK,QAAU,EACxC,KAAA,WAAa,EAAK,WAAa,EAAK,WAAa,EACjD,KAAA,cAAgB,EAAK,cAAgB,EAAK,cAAgB,EAC1D,KAAA,cAAgB,EAAK,cAAgB,EAAK,cAAgB,EAC1D,KAAA,YAAc,EAAK,YAAc,EAAK,YAAc,gBACpD,KAAA,WAAa,EAAK,WAAa,EAAK,WAAa,GACjD,KAAA,QAAU,EAAK,QAAU,EAAK,QAAU,EAAA,QAAQ,MAChD,KAAA,MAAQ,EAAK,MAAQ,EAAK,MAAQ,OAClC,KAAA,OAAS,EAAK,OAAS,EAAK,OAAS,QACrC,KAAA,SAAW,EAAK,SAAW,EAAK,SAAW,EAAA,SAAS,MACpD,KAAA,UAAY,EAAK,UAAY,EAAK,UAAY,kBAC9C,KAAA,UAAY,EAAK,UAAY,EAAK,UAAY,SAC9C,KAAA,aAAe,EAAK,aAAe,EAAK,aAAe,SACvD,KAAA,KAAO,EAAK,KAAO,EAAK,KAAO,GAC/B,KAAA,SAAW,EAAK,SAAW,EAAK,SAAW,EAC3C,KAAA,UAAY,EAAK,UAAY,EAAK,UAAY,GAqDzD,OAjDE,EAAA,UAAA,IAAA,SAAI,GACF,EAAM,QAAU,KAAK,QAChB,KAAA,OAAO,KAAK,IAGnB,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,OAAO,KAAK,IAGnB,EAAA,UAAA,QAAA,WACY,OAAA,KAAK,OAAM,IAAI,KAAK,KAAI,MAAM,KAAK,QAG/C,EAAA,UAAA,SAAA,WACO,KAAA,QAAQ,KAAO,KAAK,UACpB,KAAA,QAAQ,UAAY,KAAK,MACzB,KAAA,QAAQ,QAAU,KAAK,QACvB,KAAA,QAAQ,SAAW,KAAK,SACxB,KAAA,QAAQ,YAAc,KAAK,UAC3B,KAAA,QAAQ,UAAY,KAAK,UACzB,KAAA,QAAQ,UAAY,KAAK,UACzB,KAAA,QAAQ,YAAc,KAAK,YAC3B,KAAA,QAAQ,aAAe,KAAK,aAC5B,KAAA,QAAQ,WAAa,KAAK,WAC1B,KAAA,QAAQ,WAAa,KAAK,WAC1B,KAAA,QAAQ,cAAgB,KAAK,cAC7B,KAAA,QAAQ,cAAgB,KAAK,eAYpC,EAAA,UAAA,OAAA,WAEO,KAAA,QAAQ,YAER,KAAA,WACA,KAAA,cAKP,EAAA,UAAA,WAAA,aACF,EArHA,GAuHA,QAAA,QAAe;;ACqBf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA/IA,IAAA,EAAA,EAAA,QAAA,wBACA,EAAA,QAAA,gBAEA,EAAA,SAAA,GAcE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAK,KA6Hf,OAtIS,EAAA,KAAe,MAEf,EAAA,OAAiB,EACjB,EAAA,KAAwB,GACxB,EAAA,OAAqB,GACrB,EAAA,cAAwB,EACxB,EAAA,aAA8B,GAInC,EAAK,MAAQ,SAAS,cAAc,SACpC,EAAK,MAAM,IAAM,EAAK,IACtB,EAAK,MAAM,OACX,EAAK,MAAM,YAAc,YAEzB,EAAK,MAAM,iBAAiB,iBAAkB,WAC5C,EAAK,OAAQ,EACb,QAAQ,KAAK,SAAS,EAAK,IAAG,sBAC9B,QAAQ,IAAI,EAAK,MACjB,QAAQ,IAAI,EAAK,QACjB,EAAK,KAAK,QAAQ,SAAC,EAAK,GACtB,EAAG,WAAA,EAAI,EAAK,OAAO,QAIvB,EAAK,MAAM,iBAAiB,QAAS,WACnC,QAAQ,MAAM,gCAEhB,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAQ,EACvC,EAAK,QAAU,EAAK,QAAU,EAAK,QAAU,EAC7C,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAM,MAClD,EAAK,OAAS,EAAK,OAAS,EAAK,OAAS,EAAK,MAAM,OAuGzD,EAFA,OA1IoB,EAAA,EAAA,GAwClB,EAAA,UAAA,OAAA,aAIA,EAAA,UAAA,aAAA,WACQ,IAAA,EAAS,SAAS,cAAc,UAEtC,SAAS,KAAK,YAAY,GACpB,IAAA,EAAU,EAAO,WAAW,MAQ3B,OAPP,EAAO,MAAQ,KAAK,MACpB,EAAO,OAAS,KAAK,OACrB,EAAQ,UAAW,KAAK,OAAO,EAAI,KAAK,MAAS,KAAK,OAAO,EAAI,KAAK,QACtE,EAAQ,OAAO,KAAK,OACpB,EAAQ,UAAU,KAAK,OAAS,KAAK,OAAO,EAAI,KAAK,OAAU,KAAK,OAAO,EAAI,KAAK,OAAS,KAAK,MAAO,KAAK,QAC9G,SAAS,KAAK,YAAY,GAEnB,EAAQ,aAAc,EAAG,EAAG,KAAK,MAAO,KAAK,SA0BtD,EAAA,UAAA,QAAA,SAAQ,KAGR,EAAA,UAAA,aAAA,WACS,OAAA,IAAI,EAAA,SAAS,KAAK,SAAS,EAAK,KAAK,OAAO,EAAI,KAAK,MAAQ,KAAK,SAAS,EAAK,KAAK,OAAO,EAAI,KAAK,SAG9G,EAAA,UAAA,WAAA,WACM,KAAK,cACF,KAAA,YAAY,KAAK,aAAa,GAAI,KAAK,aAAa,GAAI,KAAK,aAAa,IAI5E,KAAA,QAAQ,YACR,KAAA,QAAQ,OAKR,KAAA,QAAQ,aAAa,KAAK,KAAM,KAAK,SAAS,EAAI,KAAK,OAAO,EAAK,KAAK,MAAQ,KAAK,SAAS,EAAI,KAAK,OAAO,EAAK,KAAK,QAExH,KAAA,QAAQ,WAGf,EAAA,UAAA,YAAA,SAAY,EAAW,EAAW,GAC5B,GAAA,KAAK,MAAO,CACT,KAAA,cAAe,EACf,KAAA,aAAe,CAAC,EAAG,EAAG,GAGtB,IAFD,IAAA,EAAQ,KAAK,eAER,EAAQ,EAAG,EAAQ,EAAM,KAAK,OAAQ,GAAS,EACtD,EAAM,KAAK,IAAU,EACrB,EAAM,KAAK,EAAQ,IAAM,EACzB,EAAM,KAAK,EAAQ,IAAM,EAItB,KAAA,KAAO,EACP,KAAA,OAAS,KAAK,gBAEd,KAAA,KAAK,KAAK,KAAK,YAAY,KAAK,OAChC,KAAA,OAAO,KAAK,CAAC,EAAG,EAAG,KAK5B,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,YACR,KAAA,QAAQ,OACR,KAAA,QAAQ,UAAU,KAAK,SAAS,EAAG,KAAK,SAAS,GACjD,KAAA,QAAQ,OAAO,KAAK,OACpB,KAAA,QAAQ,YAAc,KAAK,QAC3B,KAAA,QAAQ,UAAU,KAAK,OAAS,KAAK,OAAO,EAAI,KAAK,OAAU,KAAK,OAAO,EAAI,KAAK,OAAS,KAAK,MAAO,KAAK,QAE9G,KAAA,QAAQ,WAEjB,EA1IA,CAAoB,EAAA,SA4IpB,QAAA,QAAe;;ACHf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA5IA,IAIK,EAJL,EAAA,EAAA,QAAA,wBAEA,EAAA,QAAA,iBAEA,SAAK,GACH,EAAA,UAAA,YACA,EAAA,UAAA,YACA,EAAA,QAAA,UAHF,CAAK,IAAA,EAAU,KAMf,IAAA,EAAA,SAAA,GAmBE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAc,KA8GxB,OA/HU,EAAA,aAAuB,EACvB,EAAA,cAAwB,EACxB,EAAA,gBAA0B,EAC1B,EAAA,gBAA0B,EAC1B,EAAA,gBAA0B,EAC1B,EAAA,kBAA4B,EAC5B,EAAA,kBAA4B,EAYlC,EAAK,YAAc,GACnB,EAAK,aAAe,GACpB,EAAK,eAAiB,GACtB,EAAK,eAAiB,GACtB,EAAK,eAAiB,GACtB,EAAK,iBAAkB,GACvB,EAAK,iBAAmB,GAEpB,GACE,EAAc,SAAQ,EAAK,OAAS,EAAc,QAoG5D,EAFA,OAhI2B,EAAA,EAAA,GAkCzB,EAAA,UAAA,cAAA,SAAc,GACL,OAAA,KAAK,SAAS,SAAS,GAAS,KAAK,QAGtC,EAAA,UAAA,YAAR,SAAqB,EAAuB,GAA5C,IACM,EADN,EAAA,KAGE,SAAS,iBAAiB,EAAW,SAAC,GACpC,EAAQ,IAAI,EAAA,SAAS,EAAM,QAAS,EAAM,SACtC,EAAK,cAAc,IACrB,EAAQ,QAAQ,SAAC,GAAqB,OAAA,EAAO,QAKnD,EAAA,UAAA,UAAA,SAAU,GACH,KAAK,mBACH,KAAA,kBAAoB,KAAK,iBACzB,KAAA,YAAY,EAAW,UAAW,KAAK,mBAEzC,KAAA,iBAAiB,KAAK,EAAK,KAAK,QAGvC,EAAA,UAAA,QAAA,SAAQ,GACD,KAAK,iBACH,KAAA,gBAAkB,KAAK,eACvB,KAAA,YAAY,EAAW,QAAS,KAAK,iBAEvC,KAAA,eAAe,KAAK,EAAK,KAAK,QAGrC,EAAA,UAAA,MAAA,SAAM,GACC,KAAK,eACH,KAAA,cAAgB,KAAK,aACrB,KAAA,YAAY,EAAW,UAAW,KAAK,eAEzC,KAAA,aAAa,KAAK,EAAK,KAAK,QAGnC,EAAA,UAAA,UAAA,SAAU,GAAV,IAGQ,EAHR,EAAA,KACO,KAAK,cACH,KAAA,aAAe,KAAK,YAEzB,SAAS,iBAAiB,YAAa,SAAC,GACtC,EAAQ,IAAI,EAAA,SAAS,EAAM,QAAS,EAAM,SAC1C,EAAK,YAAY,QAAQ,SAAC,GAAqB,OAAA,EAAO,QAG1D,EAAO,EAAK,KAAK,MACZ,KAAA,YAAY,KAAK,IAIxB,EAAA,UAAA,UAAA,SAAU,GACH,KAAA,iBAAiB,KAAK,EAAK,KAAK,QAGvC,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,eAAe,KAAK,EAAK,KAAK,QAGrC,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,eAAe,KAAK,EAAK,KAAK,QAGrC,EAAA,UAAA,gBAAA,WAAA,IAAA,EAAA,KACM,GAAY,EACZ,EAAqB,IAAI,EAAA,SAE7B,SAAS,iBAAiB,YAAa,SAAC,GAClC,IACF,EAAK,SAAW,EAAA,SAAS,IAAI,EAAU,IAAI,EAAA,SAAS,EAAM,QAAS,EAAM,UACzE,EAAK,eAAe,QAAQ,SAAC,GAAmB,OAAA,SAI/C,KAAA,UAAU,SAAC,GACT,IACH,SAAS,KAAK,MAAM,OAAS,UAC7B,GAAY,EACZ,EAAW,EAAA,SAAS,IAAI,EAAK,SAAU,GACvC,EAAK,SAAW,EAAA,SAAS,IAAI,EAAU,GACvC,EAAK,iBAAiB,QAAQ,SAAC,GAAmB,OAAA,SAIjD,KAAA,QAAQ,WACP,IACF,SAAS,KAAK,MAAM,OAAS,UAC7B,GAAY,EACZ,EAAK,eAAe,QAAQ,SAAC,GAAmB,OAAA,UAIxD,EAhIA,CAA2B,EAAA,SAkI3B,QAAA,QAAe;;AC3Bf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAjHA,IAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,2BAGM,EAAS,SAAS,cAAc,UAChC,EAAU,EAAO,WAAW,MAElC,EAAA,SAAA,GAcE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAK,KA2Ff,OA1FI,EAAK,SAAW,IAAI,EAAA,SAAS,EAAG,GAChC,EAAK,OAAS,IAAI,EAAA,SAAS,EAAG,GAC9B,EAAK,OAAQ,EACb,EAAK,OAAS,GACd,EAAK,KAAO,GAEZ,EAAK,MAAQ,IAAI,MACjB,EAAK,MAAM,IAAM,EAAK,IACtB,QAAQ,IAAI,EAAK,OACjB,EAAK,MAAM,iBAAiB,OAAQ,WAClC,EAAK,OAAQ,EACb,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAM,MAClD,EAAK,OAAS,EAAK,OAAS,EAAK,OAAS,EAAK,MAAM,OACrD,EAAK,KAAK,QAAQ,SAAC,EAAK,GACtB,EAAG,WAAA,EAAI,EAAK,OAAO,QAIvB,EAAK,MAAM,iBAAiB,QAAS,SAAC,GACpC,QAAQ,IAAI,GACZ,QAAQ,MAAM,gCAGhB,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAQ,EACvC,EAAK,QAAU,EAAK,QAAU,EAAK,QAAU,EAC7C,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAQ,EAAK,MAAM,MAClD,EAAK,OAAS,EAAK,OAAS,EAAK,OAAS,EAAK,MAAM,OAgEzD,EAFA,OAxGsB,EAAA,EAAA,GA6CpB,EAAA,UAAA,aAAA,WAKS,OAJP,EAAQ,UAAU,EAAG,EAAG,OAAO,WAAY,OAAO,aAClD,EAAO,MAAQ,KAAK,MACpB,EAAO,OAAS,KAAK,OACrB,EAAQ,UAAU,KAAK,MAAO,EAAG,EAAG,KAAK,MAAO,KAAK,QAC9C,EAAQ,aAAa,EAAG,EAAG,KAAK,MAAO,KAAK,SA0BrD,EAAA,UAAA,aAAA,WACS,OAAA,IAAI,EAAA,SAAS,KAAK,SAAS,EAAK,KAAK,OAAO,EAAI,KAAK,MAAQ,KAAK,SAAS,EAAK,KAAK,OAAO,EAAI,KAAK,SAiB9G,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,YACR,KAAA,QAAQ,OACR,KAAA,QAAQ,UAAU,KAAK,SAAS,EAAG,KAAK,SAAS,GACjD,KAAA,QAAQ,OAAO,KAAK,OACpB,KAAA,QAAQ,YAAc,KAAK,QAC3B,KAAA,QAAQ,UAAU,KAAK,OAAS,KAAK,OAAO,EAAI,KAAK,OAAU,KAAK,OAAO,EAAI,KAAK,OAAS,KAAK,MAAO,KAAK,QAE9G,KAAA,QAAQ,WAEjB,EAxGA,CAAsB,EAAA,SA0GtB,QAAA,QAAe;;ACnBf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA7FA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,oBAGA,EAAA,WASE,SAAA,EAAY,GACL,KAAA,OAAS,GACT,KAAA,UAAY,EACZ,KAAA,SAAW,EACX,KAAA,gBAAkB,QAClB,KAAA,QAAU,KAAK,SAAS,QACxB,KAAA,OAAS,IAAI,EAAA,QAAO,KAAK,SAuElC,OApEE,EAAA,UAAA,WAAA,WASS,OAPU,KAAK,OAAO,OAAO,SAAC,GAC/B,OAAA,aAAiB,EAAA,SACjB,aAAiB,EAAA,UAKN,KAAK,SAAC,GAAY,OAAC,EAAQ,SAG9C,EAAA,UAAA,IAAA,SAAI,GACF,EAAQ,QAAU,KAAK,QAClB,KAAA,OAAO,KAAK,GACZ,KAAA,oBAGP,EAAA,UAAA,OAAA,SAAO,GACD,IAAA,EAAQ,KAAK,OAAO,QAAQ,GAC5B,GAAS,GACN,KAAA,OAAO,OAAO,EAAO,IAI9B,EAAA,UAAA,YAAA,WACO,KAAA,QAAQ,OACR,KAAA,QAAQ,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GACpC,KAAA,QAAQ,UAAY,KAAK,gBACzB,KAAA,QAAQ,SAAS,EAAG,EAAG,OAAO,WAAY,OAAO,aACjD,KAAA,QAAQ,WAGf,EAAA,UAAA,MAAA,SAAM,GACA,KAAK,QAAQ,sBACV,KAAA,QAAQ,sBAAwB,EAC5B,KAAK,QAAQ,yBACjB,KAAA,QAAQ,yBAA2B,EAC/B,KAAK,QAAQ,8BACjB,KAAA,QAAQ,4BAA8B,IAI/C,EAAA,UAAA,iBAAA,WACO,KAAA,OAAO,KAAK,SAAC,EAAG,GAAM,OAAA,EAAE,QAAU,EAAE,WAG3C,EAAA,UAAA,WAAA,SAAW,GAAX,IAAA,EAAA,KACO,KAAA,SAAW,YAAY,WACtB,GAAM,IACV,EAAK,UACJ,KAAK,YAGV,EAAA,UAAA,eAAA,WACE,cAAc,KAAK,WAGrB,EAAA,UAAA,OAAA,WACO,KAAK,cAIH,KAAA,cACA,KAAA,OAAO,QAAQ,SAAA,GAAS,OAAA,EAAM,WAC9B,KAAA,OAAO,WALZ,QAAQ,KAAK,iCACb,WAAW,KAAK,OAAO,KAAK,MAAO,OAOzC,EAtFA,GAwFA,QAAA,QAAe;;AC3Bf,aAAA,QAAA,YAAA,EAlEA,IAAA,EAAA,QAAA,gBAEA,EAAA,WAME,SAAA,EAAY,EAA4B,EAAgB,GAAxD,IAAA,EAAA,KAFO,KAAA,UAAoB,IAAO,GAG5B,EACG,KAAA,OAAS,GAET,KAAA,OAAS,SAAS,cAAc,UACrC,SAAS,KAAK,YAAY,KAAK,SAG7B,GAAS,GACN,KAAA,OAAO,MAAQ,EACf,KAAA,OAAO,OAAS,IAEhB,KAAA,OAAO,MAAQ,OAAO,WACtB,KAAA,OAAO,OAAS,OAAO,aAGzB,KAAA,QAAU,KAAK,OAAO,WAAW,MACtC,OAAO,iBAAiB,SAAU,WAChC,EAAK,OAAO,MAAQ,OAAO,WAC3B,EAAK,OAAO,OAAS,OAAO,cAqClC,OAjCE,EAAA,UAAA,SAAA,WACS,OAAA,KAAK,OAAO,OAGrB,EAAA,UAAA,UAAA,WACS,OAAA,KAAK,OAAO,QAGrB,EAAA,UAAA,QAAA,WACS,OAAA,IAAI,EAAA,SACT,KAAK,OAAO,MACZ,KAAK,OAAO,SAGhB,EAAA,UAAA,eAAA,WACS,OAAA,KAAK,OAAO,aAGrB,EAAA,UAAA,WAAA,WAAA,IAAA,EAAA,KAEE,SAAS,iBAAiB,QAAS,WAE/B,EAAK,OAAO,6BAKlB,EAAA,UAAA,SAAA,SAAS,GACF,KAAA,MAAQ,EACR,KAAA,MAAM,SAAW,KACjB,KAAA,MAAM,QAAU,KAAK,QACrB,KAAA,MAAM,OAAM,IAErB,EA9DA,GAgEA,QAAA,QAAe;;AC7Cf,aAAA,QAAA,YAAA,EArBA,IAAA,EAAA,QAAA,gBAEA,EAAA,WAiBA,OAXE,SAAY,GACL,KAAA,QAAU,EAAO,QACjB,KAAA,KAAO,EAAO,KAAO,EAAO,KAAO,IAAI,EAAA,SAAS,IAAK,KACrD,KAAA,SAAW,KAAK,QAAQ,qBAAqB,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,KAAK,KAAK,EAAG,KAAK,KAAK,GAEzF,IADd,IAAA,EAAU,EACI,EAAA,EAAA,EAAA,EAAO,OAAP,EAAA,EAAA,OAAA,IAAe,CAAxB,IAAA,EAAK,EAAA,GACP,KAAA,SAAS,aAAa,EAAS,GAEpC,GAAW,EAAI,EAAO,OAAO,SAdnC,GAmBA,QAAA,QAAe;;AC8Cf,aAAA,QAAA,YAAA,EApEA,IAAA,EAAA,WAME,SAAA,EAAa,EAAS,EAAW,EAAU,QAA9B,IAAA,IAAA,EAAA,QAAS,IAAA,IAAA,EAAA,QAAW,IAAA,IAAA,EAAA,QAAU,IAAA,IAAA,EAAA,GACpC,KAAA,IAAQ,KAAK,MAAY,IAAN,GACnB,KAAA,MAAQ,KAAK,MAAc,IAAR,GACnB,KAAA,KAAQ,KAAK,MAAa,IAAP,GACnB,KAAA,MAAQ,EAET,KAAK,IAAM,IAAK,KAAK,IAAM,IACtB,KAAK,IAAM,IAAG,KAAK,IAAM,GAE9B,KAAK,MAAQ,IAAK,KAAK,MAAQ,IAC1B,KAAK,MAAQ,IAAG,KAAK,MAAQ,GAElC,KAAK,KAAO,IAAK,KAAK,KAAO,IACxB,KAAK,KAAO,IAAG,KAAK,KAAO,GAEhC,KAAK,MAAQ,EAAG,KAAK,MAAQ,EACxB,KAAK,MAAQ,IAAG,KAAK,MAAQ,GA4C1C,OAzCE,EAAA,UAAA,OAAA,SAAQ,GAEC,KAAA,IADH,EAAQ,IACC,IACF,EAAQ,EACN,EAEA,GAIf,EAAA,UAAA,SAAA,SAAU,GAED,KAAA,MADH,EAAQ,IACG,IACJ,EAAQ,EACJ,EAEA,GAIjB,EAAA,UAAA,QAAA,SAAS,GAEA,KAAA,KADH,EAAQ,IACE,IACH,EAAQ,EACL,EAEA,GAIhB,EAAA,UAAA,KAAA,WACS,MAAA,QAAQ,KAAK,IAAG,KAAK,KAAK,MAAK,KAAK,KAAK,KAAI,KAAK,KAAK,MAAK,KAGrE,EAAA,UAAA,IAAA,WACS,MAAA,OAAO,KAAK,IAAG,KAAK,KAAK,MAAK,KAAK,KAAK,KAAI,KAG9C,EAAA,OAAP,WACS,OAAA,IAAI,EAAM,KAAK,SAAU,KAAK,SAAU,KAAK,WAExD,EAlEA,GAoEA,QAAA,QAAe;;ACYf,aAAA,QAAA,YAAA,EAhFA,IAAA,EAAA,QAAA,gBAEA,EAAA,WAcE,SAAA,EAAY,GAbL,KAAA,MAAgB,EAChB,KAAA,KAAiB,IAAI,EAAA,SAAS,GAAI,IAOlC,KAAA,MAAiB,IAAI,EAAA,SAAS,EAAG,GAEjC,KAAA,kBAA4B,EAI5B,KAAA,KAAK,EAAc,KACnB,KAAA,MAAO,EAAc,MAAO,EAAc,KAC1C,KAAA,KAAO,EAAc,KAAO,EAAc,KAAO,IAAI,EAAA,SAAS,GAAI,IAClE,KAAA,MAAQ,EAAc,MAAQ,EAAc,MAAQ,IAAI,EAAA,SAAS,EAAG,GACpE,KAAA,UAAY,EAAc,UAAY,EAAc,UAAY,GAChE,KAAA,WAAa,EAAc,WAC3B,KAAA,EAAI,EACJ,KAAA,EAAI,EAsDb,OAnDE,EAAA,UAAA,cAAA,SAAe,GACR,KAAK,mBACH,KAAA,kBAAmB,EACnB,KAAA,MAAM,EAAI,EACV,KAAA,MAAM,EAAI,KAAK,WAAW,GAAM,GAChC,KAAA,mBAAmB,KAI5B,EAAA,UAAA,mBAAA,SAAoB,GAApB,IAAA,EAAA,KACO,KAAA,EAAI,KAAK,KAAK,EAAI,KAAK,MAAM,EAC7B,KAAA,EAAI,KAAK,KAAK,EAAI,KAAK,MAAM,EAC7B,KAAA,MAAM,GAAK,EACZ,KAAK,MAAM,GAAK,KAAK,WAAW,GAAM,GACnC,KAAA,kBAAmB,EAExB,WAAW,WAAM,OAAA,EAAK,mBAAmB,IAAO,KAAK,YAIzD,EAAA,UAAA,UAAA,aAIA,EAAA,UAAA,QAAA,SAAQ,KAER,EAAA,UAAA,KAAA,SAAK,GACE,KAAA,MAAQ,IAAI,MACZ,KAAA,MAAM,IAAM,GAGnB,EAAA,UAAA,QAAA,WACS,OAAA,IAAI,EAAA,SAAS,KAAK,KAAK,EAAI,KAAK,MAAM,EAAG,KAAK,KAAK,EAAI,KAAK,MAAM,IAG3E,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,UACX,KAAK,MACL,KAAK,EACL,KAAK,EACL,KAAK,KAAK,EAAG,KAAK,KAAK,EACvB,KAAK,SAAS,EACd,KAAK,SAAS,EACd,KAAK,KAAK,EAAI,KAAK,MAAM,EACzB,KAAK,KAAK,EAAI,KAAK,MAAM,IAI7B,EAAA,UAAA,QAAA,WACE,cAAc,KAAK,WAEvB,EA5EA,GA8EA,QAAA,QAAe;;AChBf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAhEA,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,sBAEA,EAAA,SAAA,GAIE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAc,KAuDxB,OA3DS,EAAA,QAAkB,GAClB,EAAA,QAAkB,EAInB,IACF,EAAK,UAAY,EAAc,UAAY,EAAc,UAAY,EAAK,UAC1E,EAAK,UAAY,EAAc,UAAY,EAAc,UAAY,EAAK,UAC1E,EAAK,QAAU,EAAc,QAAU,EAAc,QAAU,EAAK,QACpE,EAAK,QAAU,EAAc,QAAU,EAAc,QAAU,EAAK,QACpE,EAAK,OAAS,EAAc,OAAS,EAAc,OAAS,EAAK,OACjE,EAAK,MAAQ,EAAc,MAAQ,EAAc,MAAQ,EAAK,MAC9D,EAAK,KAAO,EAAc,KAAO,EAAc,KAAO,EAAK,KACvD,EAAc,iBAChB,EAAK,eAAiB,EAAc,iBA6C5C,EAFA,OA1DsB,EAAA,EAAA,GAqBpB,EAAA,UAAA,eAAA,WACO,KAAA,MAAQ,IAAI,EAAA,QAAe,CAC9B,QAAS,KAAK,QACd,OAAQ,KAAK,eACb,KAAM,IAAI,EAAA,SAAS,KAAK,SAAS,EAAG,KAAK,SAAS,EAAI,KAAK,SAC3D,SAAU,IAAI,EAAA,SAAS,KAAK,SAAS,EAAG,KAAK,SAAS,EAAI,KAAK,QAAU,KACxE,SAEC,KAAK,OACF,KAAA,QAAQ,YACR,KAAA,QAAQ,UAAY,KAAK,MACzB,KAAA,QAAQ,QAAQ,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,KAAK,QAAS,KAAK,QAAS,EAAG,EAAG,EAAI,KAAK,IAC7F,KAAA,QAAQ,QAEX,KAAK,SACF,KAAA,QAAQ,UAAY,KAAK,UACzB,KAAA,QAAQ,YAAc,KAAK,UAC3B,KAAA,QAAQ,WAIjB,EAAA,UAAA,OAAA,WACO,KAAA,kBAeT,EA1DA,CAAsB,EAAA,SA4DtB,QAAA,QAAe;;AC7Bf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAnCA,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBAEA,EAAA,SAAA,GAGE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAc,KA4BxB,OA3BQ,EAAc,QAAO,EAAK,MAAQ,EAAc,OAChD,EAAc,SAAQ,EAAK,OAAS,EAAc,QAClD,EAAc,QAAO,EAAK,MAAQ,EAAc,MAAM,MAAM,EAAG,EAAc,MAAM,SACnF,EAAc,OAAM,EAAK,KAAO,EAAc,MAClD,EAAK,SAAW,EAAc,MAAM,MAAM,GAC1C,EAAK,MAAM,OAAO,SAAC,GACV,OAAA,IAAI,EAAA,SAAS,EAAI,EAAI,EAAK,SAAS,EAAG,EAAI,EAAI,EAAK,SAAS,KAqBzE,EAFA,OA9BsB,EAAA,EAAA,GAepB,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,YACR,KAAA,QAAQ,YAAc,KAAK,UAC3B,KAAA,QAAQ,QAAU,KAAK,QACvB,KAAA,QAAQ,UAAY,KAAK,MACzB,KAAA,QAAQ,SAAW,KAAK,SACxB,KAAA,QAAQ,OAAO,KAAK,MAAM,GAAG,EAAG,KAAK,MAAM,GAAG,GAC9C,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,MAAM,OAAQ,IAChC,KAAA,QAAQ,OAAO,KAAK,MAAM,GAAG,EAAI,KAAK,SAAS,EAAG,KAAK,MAAM,GAAG,EAAI,KAAK,SAAS,GAGpF,KAAA,QAAQ,YACR,KAAA,QAAQ,OACT,KAAK,QAAQ,KAAK,QAAQ,QAElC,EA9BA,CAAsB,EAAA,SAgCtB,QAAA,QAAe;;ACTf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAzBA,IAAA,EAAA,EAAA,QAAA,2BAEA,EAAA,SAAA,GAGE,SAAA,EAAa,GAAb,IAAA,EACE,EAAA,KAAA,KAAM,IAAO,KAmBjB,OAtBS,EAAA,OAAiB,EAIlB,IACF,EAAK,OAAS,EAAO,OAAS,EAAO,OAAS,GAiBpD,EAFA,OArBqB,EAAA,EAAA,GAUnB,EAAA,UAAA,WAAA,WACO,KAAA,QAAQ,IAAI,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,KAAK,OAAQ,EAAG,EAAI,KAAK,IAExE,KAAK,MACF,KAAA,QAAQ,OAGX,KAAK,QACF,KAAA,QAAQ,UAGnB,EArBA,CAAqB,EAAA,SAuBrB,QAAA,QAAe;;ACOf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAjCA,IAAA,EAAA,EAAA,QAAA,cAEA,EAAA,SAAA,GAIE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAK,KA0Bf,OA9BS,EAAA,MAAgB,EAChB,EAAA,OAAiB,EAIlB,EAAK,QAAO,EAAK,MAAQ,EAAK,OAC9B,EAAK,SAAQ,EAAK,OAAS,EAAK,QAwBxC,EAFA,OA7BmB,EAAA,EAAA,GAUjB,EAAA,UAAA,WAAA,WACM,KAAK,MACF,KAAA,QAAQ,SACX,KAAK,SAAS,EACd,KAAK,SAAS,EACd,KAAK,MACL,KAAK,QAIL,KAAK,QACF,KAAA,QAAQ,WACX,KAAK,SAAS,EACd,KAAK,SAAS,EACd,KAAK,MACL,KAAK,SAIb,EA7BA,CAAmB,EAAA,SA+BnB,QAAA,QAAe;;ACDf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAhCA,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBAEA,EAAA,SAAA,GAIE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAK,KAwBf,OA5BS,EAAA,MAAkB,IAAI,EAAA,SAAS,EAAG,GAClC,EAAA,IAAgB,IAAI,EAAA,SAAS,EAAG,GAIjC,IACE,EAAK,QAAO,EAAK,MAAQ,EAAK,OAC9B,EAAK,MAAK,EAAK,IAAM,EAAK,KAC1B,EAAK,QAAO,EAAK,MAAQ,EAAK,OAC9B,EAAK,QAAO,EAAK,SAAW,EAAK,OACrC,EAAK,IAAM,IAAI,EAAA,SAAS,EAAK,IAAI,EAAI,EAAK,MAAM,EAAG,EAAK,IAAI,EAAI,EAAK,MAAM,IAkBjF,EAFA,OA3BmB,EAAA,EAAA,GAejB,EAAA,UAAA,WAAA,WAOM,KAAA,QAAQ,YACP,KAAA,QAAQ,OAAO,KAAK,SAAS,EAAG,KAAK,SAAS,GAC9C,KAAA,QAAQ,OAAO,KAAK,IAAI,EAAI,KAAK,SAAS,EAAG,KAAK,IAAI,EAAI,KAAK,SAAS,GACxE,KAAA,QAAQ,UAEjB,EA3BA,CAAmB,EAAA,SA6BnB,QAAA,QAAe;;ACiBf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAjDA,IAAA,EAAA,EAAA,QAAA,cAEA,EAAA,SAAA,GAME,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAc,KAwCxB,OA7CS,EAAA,WAAqB,GACrB,EAAA,WAAqB,GACrB,EAAA,SAAmB,IAIpB,IACF,EAAK,QAAU,EAAc,QAAU,EAAc,QAAU,IAsCrE,EAFA,OA7CmB,EAAA,EAAA,GAajB,EAAA,UAAA,SAAA,WAMM,IALA,IAAA,EAAI,KAAK,SAAS,EAClB,EAAI,KAAK,SAAS,EAClB,EAAQ,KAAK,QAAQ,MAAM,KAC3B,EAAO,GAEH,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CAChC,IAAA,EAAW,EAAO,EAAM,GAAK,IACnB,KAAK,QAAQ,YAAY,GACf,MACR,KAAK,UAAY,EAAI,GAC9B,KAAA,QAAQ,SAAS,EAAM,EAAG,GAC/B,EAAO,EAAM,GAAK,IAClB,GAAK,KAAK,YAGV,EAAO,EAGN,KAAA,QAAQ,SAAS,EAAM,EAAG,IAGjC,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,UAAY,KAAK,MACzB,KAAA,QAAQ,KAAU,KAAK,OAAM,IAAI,KAAK,KAAI,MAAM,KAAK,OACrD,KAAA,QAAQ,UAAY,KAAK,UACzB,KAAA,QAAQ,aAAe,KAAK,aAC7B,KAAK,QACF,KAAA,QAAQ,WAAW,KAAK,QAAS,KAAK,SAAS,EAAG,KAAK,SAAS,GAElE,KAAA,QAAQ,SAAS,KAAK,QAAS,KAAK,SAAS,EAAG,KAAK,SAAS,IAEvE,EA7CA,CAAmB,EAAA,SA+CnB,QAAA,QAAe;;ACtBf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA3BA,IAAA,EAAA,EAAA,QAAA,2BAEA,EAAA,SAAA,GAIE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,IAAc,KAoBxB,OAxBS,EAAA,SAAmB,EACnB,EAAA,WAAqB,KAAK,GAI3B,IACF,EAAK,SAAW,EAAc,SAAW,EAAc,SAAW,EAClE,EAAK,WAAa,EAAc,WAAa,EAAc,WAAa,KAAK,IAiBnF,EAFA,OAvBkB,EAAA,EAAA,GAYhB,EAAA,UAAA,WAAA,WACO,KAAA,QAAQ,IAAI,EAAG,EAAG,KAAK,OAAQ,KAAK,SAAU,KAAK,YAAY,GAEhE,KAAK,MACF,KAAA,QAAQ,OAGX,KAAK,QACF,KAAA,QAAQ,UAGnB,EAvBA,CAAkB,EAAA,SAyBlB,QAAA,QAAe;;ACHf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAxBA,IAAA,EAAA,EAAA,QAAA,cAEA,EAAA,SAAA,GAGE,SAAA,EAAa,GAAb,IAAA,EACE,EAAA,KAAA,KAAM,IAAO,KAkBjB,OAjBI,EAAK,MAAQ,EAAO,MAAQ,EAAO,MAAQ,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,KAiBzE,EAFA,OApB0B,EAAA,EAAA,GAQxB,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,OACR,KAAA,QAAQ,YACR,KAAA,QAAQ,QAAU,KAAK,QACvB,KAAA,QAAQ,UAAY,KAAK,UACzB,KAAA,QAAQ,YAAc,KAAK,UAC3B,KAAA,QAAQ,SAAW,KAAK,SACxB,KAAA,QAAQ,UAAU,KAAK,SAAS,EAAG,KAAK,SAAS,GACjD,KAAA,QAAQ,cAAc,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,IAC9H,KAAA,QAAQ,SACR,KAAA,QAAQ,WAEjB,EApBA,CAA0B,EAAA,SAsB1B,QAAA,QAAe;;ACIf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA5BA,IAAA,EAAA,EAAA,QAAA,cAEA,EAAA,SAAA,GAKE,SAAA,EAAa,GAAb,IAAA,EACE,EAAA,KAAA,KAAM,IAAO,KAoBjB,OAnBI,EAAK,MAAQ,EAAO,MAAQ,EAAO,MAAQ,QAC3C,EAAK,MAAQ,EAAO,MAAQ,EAAO,MAAQ,EAC3C,EAAK,MAAQ,EAAO,MAAQ,EAAO,MAAQ,CAAC,CAAC,GAAI,KAAM,CAAC,IAAK,KAiBjE,EAFA,OAxB6B,EAAA,EAAA,GAY3B,EAAA,UAAA,OAAA,WACO,KAAA,QAAQ,OACR,KAAA,QAAQ,YACR,KAAA,QAAQ,QAAU,KAAK,QACvB,KAAA,QAAQ,SAAW,KAAK,SACxB,KAAA,QAAQ,UAAY,KAAK,MACzB,KAAA,QAAQ,YAAc,KAAK,MAC3B,KAAA,QAAQ,OAAO,KAAK,SAAS,EAAG,KAAK,SAAS,GAC9C,KAAA,QAAQ,iBAAiB,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,GAAI,KAAK,MAAM,GAAG,IAC7F,KAAA,QAAQ,SACR,KAAA,QAAQ,WAEjB,EAxBA,CAA6B,EAAA,SA0B7B,QAAA,QAAe;;ACef,aAAA,QAAA,YAAA,EA1BA,IAAA,EAAA,WAAA,SAAA,IACS,KAAA,OAAc,CAEnB,UAAW,GACX,QAAS,GACT,UAAW,GACX,iBAAiB,EACjB,iBAAiB,EACjB,eAAe,EAGf,SAAU,GACV,MAAO,GACP,QAAS,GACT,gBAAgB,EAChB,eAAe,EACf,aAAa,GAQjB,OALS,EAAA,UAAA,UAAP,SAAkB,GAAlB,IAAA,EAAA,KACE,SAAS,iBAAiB,EAAM,SAAC,GAC/B,EAAK,OAAO,GAAM,QAAQ,SAAC,GAAmB,OAAA,EAAK,EAAM,QAG/D,EAxBA,GA0BA,QAAA,QAAe;;ACJf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAtCA,IAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,YAEA,EAAA,SAAA,GAIE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KA8BX,OAlCS,EAAA,SAAqB,IAAI,EAAA,SAAS,EAAG,GACrC,EAAA,SAAmB,EAIxB,EAAK,KAAK,SAAC,EAAW,GACpB,EAAK,SAAS,EAAI,EAAM,QACxB,EAAK,SAAS,EAAI,EAAM,UA2B9B,EAFA,OAjCoB,EAAA,EAAA,GAYlB,EAAA,UAAA,KAAA,SAAM,GACC,KAAK,OAAO,kBACV,KAAA,UAAU,aACV,KAAA,OAAO,iBAAkB,GAE3B,KAAA,OAAO,UAAU,KAAK,IAG7B,EAAA,UAAA,GAAA,SAAI,GACG,KAAK,OAAO,gBACV,KAAA,UAAU,WACV,KAAA,OAAO,eAAgB,IAIhC,EAAA,UAAA,KAAA,SAAM,GACC,KAAK,OAAO,kBACV,KAAA,UAAU,aACV,KAAA,OAAO,iBAAkB,IAGpC,EAjCA,CAAoB,EAAA,SAmCpB,QAAA,QAAe;;ACSf,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EA/CA,IAAA,EAAA,EAAA,QAAA,YAEA,EAAA,SAAA,GAAA,SAAA,IAAA,IAAA,EAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA6CA,OA5CS,EAAA,KAAsB,GA4C/B,EAFA,OA3CuB,EAAA,EAAA,GAGrB,EAAA,UAAA,MAAA,SAAO,EAAa,GAApB,IAAA,EAAA,KAUO,KAAK,OAAO,iBACV,KAAA,OAAO,gBAAiB,EACxB,KAAA,UAAU,aAEZ,KAAA,OAAO,SAAS,KAbP,SAAC,EAAW,GAGpB,EAAM,MAAQ,GAEhB,EAAK,EAAM,MAWjB,EAAA,UAAA,KAAA,SAAM,EAAa,GAAnB,IAAA,EAAA,KACE,EAAO,SAAC,EAAW,GACb,EAAM,MAAQ,GAAK,EAAK,EAAM,IAG/B,KAAK,OAAO,gBACV,KAAA,OAAO,eAAgB,EACvB,KAAA,UAAU,YAEZ,KAAA,OAAO,QAAQ,KAAK,IAG3B,EAAA,UAAA,GAAA,SAAI,EAAa,GAAjB,IAAA,EAAA,KAKO,KAAK,OAAO,cACV,KAAA,OAAO,aAAc,EACrB,KAAA,UAAU,UAEZ,KAAA,OAAO,MAAM,KARJ,SAAC,EAAW,GACpB,EAAM,MAAQ,GAAK,EAAK,EAAM,MASxC,EA3CA,CAAuB,EAAA,SA6CvB,QAAA,QAAe;;;;ACQf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAxDA,IAAM,EAAa,SAAS,cAAc,SAC1C,EAAW,KAAO,WAClB,EAAW,UAAY,6EAWvB,SAAS,KAAK,YAAY,GAE1B,IAAA,EAAA,EAAA,QAAA,YA+DE,QAAA,MA/DK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,aA+DE,QAAA,OA/DK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,qBA8CE,QAAA,eA9CK,EAAA,QACP,IAAA,EAAA,QAAA,gBAqDE,QAAA,SArDO,EAAA,SACT,IAAA,EAAA,EAAA,QAAA,YAgDE,QAAA,MAhDK,EAAA,QAGP,IAAA,EAAA,EAAA,QAAA,sBA8CE,QAAA,UA9CK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,uBAsDE,QAAA,QAtDK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,uBAwCE,QAAA,QAxCK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,uBAgDE,QAAA,QAhDK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,oBAgDE,QAAA,QAhDK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,sBA2CE,QAAA,OA3CK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,kBAiCE,QAAA,MAjCK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,oBAwCE,QAAA,KAxCK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,oBA0CE,QAAA,KA1CK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,oBA4CE,QAAA,KA5CK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,mBA4CE,QAAA,IA5CK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,2BA6BE,QAAA,YA7BK,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,8BA0BE,QAAA,eA1BK,EAAA,QAGP,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,sBAEM,EAAQ,IAAI,EAAA,QAyBhB,QAAA,MAAA,EAxBF,IAAM,EAAW,IAAI,EAAA,QAyBnB,QAAA,SAAA,EAtBF,QAAQ,IAAI,QAEZ,IAAM,EAAS,IAAI,EAAA,QACb,EAAQ,IAAI,EAAA,QAAM,GAEpB,EAAM,QAAQ,gBACZ,EAAM,IAAI,EAAA,QAAQ,CACtB,IAAK,IAGP,EAAO,SAAS,GAChB,EAAM,IAAI,GACV,EAAM","file":"index.js","sourceRoot":"..\\src","sourcesContent":["class Vector {\r\n  public x: number\r\n  public y: number\r\n\r\n  constructor (x: number = 0, y: number = 0) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  add (vector: Vector): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  sub (vector: Vector): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  mult (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  div (scalar: number): void {\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  inverse (): void {\r\n    this.x *= -1\r\n    this.y *= -1\r\n  }\r\n\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  dot (vector: Vector): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  distance (vector: Vector): number {\r\n    return Vector.sub(this, vector).mag()\r\n  }\r\n\r\n  angle (): number {\r\n    return Math.atan2(this.y, this.x)\r\n  }\r\n\r\n  copy (): Vector {\r\n    return new Vector(this.x, this.y)\r\n  }\r\n\r\n  normalize (): void {\r\n    this.div(this.mag())\r\n  }\r\n\r\n  setMag (mag: number): void {\r\n    this.normalize()\r\n    this.mult(mag)\r\n  }\r\n\r\n  setAngle (angle: number): void {\r\n    const magnitude = this.mag()\r\n\r\n    this.x = magnitude * Math.cos(angle)\r\n    this.y =  magnitude * Math.sin(angle)\r\n  }\r\n\r\n  addAngle (angle: number): void {\r\n    this.setAngle(this.angle() + angle)\r\n  }\r\n\r\n  limit (scalar: number): void {\r\n    if (this.mag() > scalar) {\r\n      this.setMag(scalar)\r\n    }\r\n  }\r\n\r\n  moveTowards (vector: Vector, speed: number = 1, stop: number = 1): void {\r\n    if (this.distance(vector) > stop) {\r\n      const unit = Vector.normalize(Vector.sub(vector, this))\r\n      unit.mult(speed)\r\n      this.add(unit)\r\n    }\r\n  }\r\n\r\n  zero (): void {\r\n    this.x = 0\r\n    this.y = 0\r\n  }\r\n\r\n  static add (vector1: Vector, vector2: Vector): Vector {\r\n    return new Vector(vector1.x + vector2.x, vector1.y + vector2.y)\r\n  }\r\n\r\n  static sub (vector1: Vector, vector2: Vector): Vector {\r\n    return new Vector(vector1.x - vector2.x, vector1.y - vector2.y)\r\n  }\r\n\r\n  static mult (vector: Vector, scalar: number): Vector {\r\n    return new Vector(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  static div (vector: Vector, scalar: number): Vector {\r\n    return new Vector(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  static inverse (vector: Vector): Vector {\r\n    return new Vector(vector.x * -1, vector.y * -1)\r\n  }\r\n\r\n  static distance (vector1: Vector, vector2: Vector): number {\r\n    return this.sub(vector1, vector2).mag()\r\n  }\r\n\r\n  static normalize (vector: Vector): Vector {\r\n    return this.div(vector, vector.mag())\r\n  }\r\n\r\n  static cross (vector1: Vector, vector2: Vector): number {\r\n    return vector1.x * vector2.y - vector2.x * vector1.y\r\n  }\r\n\r\n  static randomP (x: number, y: number): Vector {\r\n    return new Vector(x * Math.random(), y * Math.random())\r\n  }\r\n\r\n  static random (x: number = 1, y: number = 1): Vector {\r\n    let s1 = 1\r\n    let s2 = 1\r\n    if (Math.random() > 0.5) s1 = -1\r\n    if (Math.random() > 0.5) s2 = -1\r\n    return new Vector(x * Math.random() * s1, y * Math.random() * s2)\r\n  }\r\n}\r\n\r\nexport default Vector\r\n  ","\r\nclass Vector3D {\r\n  public x: number\r\n  public y: number\r\n  public z: number\r\n\r\n  constructor (x: number, y: number, z: number) {\r\n    this.x = x\r\n    this.y = y\r\n    this.z = z\r\n  }\r\n\r\n  add (vector: Vector3D): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n    this.z += vector.z\r\n  }\r\n\r\n  sub (vector: Vector3D): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n    this.z -= vector.z\r\n  }\r\n\r\n  mult (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n    this.z *= scalar\r\n  }\r\n\r\n  div (scalar: number): void {\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n    this.z /= scalar\r\n  }\r\n\r\n  inverse (): void {\r\n    this.x *= -1\r\n    this.y *= -1\r\n    this.z *= -1\r\n  }\r\n\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n  }\r\n\r\n  dot (vector: Vector3D): number {\r\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z\r\n  }\r\n\r\n  distance (vector: Vector3D): number {\r\n    return Vector3D.sub(this, vector).mag()\r\n  }\r\n\r\n  angle (): number {\r\n    return Math.atan2(this.y, this.x)\r\n  }\r\n\r\n  copy (): Vector3D {\r\n    return new Vector3D(this.x, this.y, this.z)\r\n  }\r\n\r\n  normalize (): void {\r\n    this.div(this.mag())\r\n  }\r\n\r\n  setMag (mag: number): void {\r\n    this.normalize()\r\n    this.mult(mag)\r\n  }\r\n\r\n  setAngle (angle: number): void {\r\n    const magnitude = this.mag()\r\n\r\n    this.x = magnitude * Math.cos(angle)\r\n    this.y =  magnitude * Math.sin(angle)\r\n  }\r\n\r\n  addAngle (angle: number): void {\r\n    this.setAngle(this.angle() + angle)\r\n  }\r\n\r\n  limit (scalar: number): void {\r\n    if (this.mag() > scalar) {\r\n      this.setMag(scalar)\r\n    }\r\n  }\r\n\r\n  moveTowards (vector: Vector3D, speed: number, stop: number): void {\r\n    if (this.distance(vector) > stop) {\r\n      const unit = Vector3D.normalize(vector)\r\n      unit.mult(speed)\r\n      this.add(unit)\r\n    }\r\n  }\r\n\r\n  zero (): void {\r\n    this.x = 0\r\n    this.y = 0\r\n    this.z = 0\r\n  }\r\n\r\n  static add (vector1: Vector3D, vector2: Vector3D): Vector3D {\r\n    return new Vector3D(vector1.x + vector2.x, vector1.y + vector2.y, vector1.z + vector2.z)\r\n  }\r\n\r\n  static sub (vector1: Vector3D, vector2: Vector3D): Vector3D {\r\n    return new Vector3D(vector1.x - vector2.x, vector1.y - vector2.y, vector1.z - vector2.z)\r\n  }\r\n\r\n  static mult (vector: Vector3D, scalar: number): Vector3D {\r\n    return new Vector3D(vector.x * scalar, vector.y * scalar, vector.z * scalar)\r\n  }\r\n\r\n  static div (vector: Vector3D, scalar: number): Vector3D {\r\n    return new Vector3D(vector.x / scalar, vector.y / scalar, vector.z / scalar)\r\n  }\r\n\r\n  static inverse (vector: Vector3D): Vector3D {\r\n    return new Vector3D(vector.x * -1, vector.y * -1, vector.z * -1)\r\n  }\r\n\r\n  static distance (vector1: Vector3D, vector2: Vector3D): number {\r\n    return this.sub(vector1, vector2).mag()\r\n  }\r\n\r\n  static normalize (vector: Vector3D): Vector3D {\r\n    return this.div(vector, vector.mag())\r\n  }\r\n\r\n  static cross (vector1: Vector3D, vector2: Vector3D): number {\r\n    return vector1.x * vector2.y - vector2.x * vector1.y\r\n  }\r\n\r\n  static random (x: number, y: number, z: number): Vector3D {\r\n    if (Math.random() > 0.5) {\r\n      return new Vector3D(x * Math.random(), y * Math.random(), z * Math.random())\r\n    } else {\r\n      return new Vector3D(-x * Math.random(), -y * Math.random(), -z * Math.random())\r\n    }\r\n  }\r\n}\r\n\r\nexport default Vector3D\r\n\r\n/*\r\n\r\nTO ADD\r\n\r\nimport vector from '../vector'\r\n\r\nfunction rotate (x, y, z, center, vec) {\r\n  let vecR\r\n  vecR = vector.sub(vec, center)\r\n  vecR = rotateX(vecR, x)\r\n  vecR = rotateY(vecR, y)\r\n  vecR = rotateZ(vecR, z)\r\n  vecR = vector.add(vecR, center)\r\n  return vecR\r\n}\r\n\r\nfunction rotateX (vec, t) {\r\n  let vecR = vec\r\n  let newy = vec[1] * Math.cos(t) - vec[2] * Math.sin(t)\r\n  let newz = vec[1] * Math.sin(t) + vec[2] * Math.cos(t)\r\n  vecR[1] = newy\r\n  vecR[2] = newz\r\n  return vecR\r\n}\r\n\r\nfunction rotateY (vec, t) {\r\n  let vecR = vec\r\n  let newz = vec[2] * Math.cos(t) - vec[0] * Math.sin(t)\r\n  let newx = vec[2] * Math.sin(t) + vec[0] * Math.cos(t)\r\n  vecR[2] = newz\r\n  vecR[0] = newx\r\n  return vecR\r\n}\r\n\r\nfunction rotateZ (vec, t) {\r\n  let vecR = vec\r\n  let newx = vec[0] * Math.cos(t) - vec[1] * Math.sin(t)\r\n  let newy = vec[0] * Math.sin(t) + vec[1] * Math.cos(t)\r\n  vecR[0] = newx\r\n  vecR[1] = newy\r\n  return vecR\r\n}\r\n\r\nconst memlength = (vec) => Math.pow(Math.pow(vec[0], 2) + Math.pow(vec[1], 2) + Math.pow(vec[2], 2), 0.5)\r\n\r\nconst normal = (v1, v2, v3) => vector.cross(vector.sub(v2, v1), vector.sub(v3, v1))\r\n\r\nfunction isInTriangle (vec, triangle) {\r\n  let u = vector.sub(triangle.v2, triangle.v1)\r\n  let v = vector.sub(triangle.v3, triangle.v1)\r\n  let w = vector.sub(vec, triangle.v1)\r\n\r\n  let vCrossW = vector.cross(v, w)\r\n  let vCrossU = vector.cross(v, u)\r\n\r\n  if (vector3.dot(vCrossW, vCrossU) < 0) return false\r\n\r\n  let uCrossW = vector.cross(u, w)\r\n  let uCrossV = vector.cross(u, v)\r\n\r\n  if (vector3.dot(uCrossW, uCrossV) < 0) return false\r\n\r\n  let denom = memlength(uCrossV)\r\n  let r = memlength(vCrossW) / denom\r\n  let t = memlength(uCrossW) / denom\r\n\r\n  return (r + t <= 1)\r\n}\r\n\r\nfunction getTriangleArea (triangle) {\r\n  let temp = vector.cross(vector.sub(triangle.v3, triangle.v1), vector.sub(triangle.v3, triangle.v2))\r\n  let x = Math.pow(temp[0], 2)\r\n  let y = Math.pow(temp[1], 2)\r\n  let z = Math.pow(temp[2], 2)\r\n  return Math.pow(x + y + z, 0.5) / 2\r\n}\r\n\r\nfunction dot (vec1, vec2) {\r\n  return vec1[0] * vec2[0] + vec1[1] * vec2[1] + vec1[2] * vec2[2]\r\n}\r\n\r\nfunction getPlaneIntersect (line1, line2, triangle) {\r\n  let normal = triangle.normal\r\n  let u = vector3.dot(normal, vector.sub(triangle.v1, line1)) / vector3.dot(normal, vector.sub(line2, line1))\r\n  return vector.add(line1, vector.mult(vector.sub(line2, line1), u))\r\n}\r\n\r\nconst vector3 = { dot, rotate, normal, isInTriangle, getTriangleArea, getPlaneIntersect, memlength }\r\n\r\nexport default vector3\r\n\r\n*/","\r\nimport Vector2D from './Vector2D'\r\nimport Vector3D from './Vector3D'\r\n\r\nexport {\r\n  Vector2D,\r\n  Vector3D\r\n}\r\n","import { Vector2D } from 'vector_class'\r\nimport Graphic from './graphics/Graphic'\r\nimport Scene from './Scene'\r\nimport {mouse} from './index'\r\n\r\nclass Camera {\r\n  public context: CanvasRenderingContext2D\r\n  public keyMap = { up: 'w', down: 's', left: 'a', right: 'd' }\r\n  public position: Vector2D = new Vector2D(0, 0)\r\n  private followedPosition: Vector2D\r\n  private fLastPosition: Vector2D = new Vector2D(0, 0)\r\n  private followingX: boolean = false\r\n  private followingY: boolean = false\r\n  private keyTranslateEnabled: boolean = false\r\n  private velocity: Vector2D = new Vector2D(0, 0)\r\n  private acceleration: Vector2D = new Vector2D(0, 0)\r\n  private friction: number = 0.9\r\n\r\n  constructor (context: CanvasRenderingContext2D) {\r\n    this.context = context\r\n  }\r\n\r\n  addForce(force: Vector2D): void {\r\n    this.acceleration.add(force)\r\n  }\r\n/*\r\n  enable() {\r\n    document.addEventListener('mousemove', (e) => {\r\n      this.mouse.position.x = e.clientX\r\n      this.mouse.position.y = e.clientY\r\n    })\r\n  }\r\n*/\r\n  getMouse () {\r\n    return Vector2D.add(mouse.position, this.position)\r\n  }\r\n\r\n  disableKeyTranslate() {\r\n\r\n  }\r\n\r\n  enableKeyTranslate() {\r\n    this.keyTranslateEnabled = true\r\n    document.addEventListener('keypress', (e) => {\r\n      if (e.key.toLowerCase() === this.keyMap.up) {\r\n        this.addForce(new Vector2D(0, 10))\r\n      }\r\n      if (e.key.toLowerCase() === this.keyMap.down) {\r\n        this.addForce(new Vector2D(0, -10))\r\n      }\r\n      if (e.key.toLowerCase() === this.keyMap.left) {\r\n        this.addForce(new Vector2D(10, 0))\r\n      }\r\n      if (e.key.toLowerCase() === this.keyMap.right) {\r\n        this.addForce(new Vector2D(-10, 0))\r\n      }\r\n    })\r\n  }\r\n\r\n  follow(graphic: Graphic): void {\r\n    this.followedPosition = graphic.position\r\n    this.fLastPosition = this.followedPosition.copy()\r\n    this.followingX = true\r\n    this.followingY = true\r\n  }\r\n\r\n  followX(graphic: Graphic): void {\r\n    this.followedPosition = graphic.position\r\n    this.followingX = true\r\n  }\r\n\r\n  followY(graphic: Graphic): void {\r\n    this.followedPosition = graphic.position\r\n    this.followingY = true\r\n  }\r\n\r\n  stopFollowing(): void {\r\n    this.followingX = false\r\n    this.followingY = false\r\n  }\r\n\r\n  stopFollowingX(): void {\r\n    this.followingX = false\r\n  }\r\n\r\n  stopFollowingY(): void {\r\n    this.followingY = false\r\n  }\r\n\r\n  zoom(where: Vector2D, howMuch: Vector2D): void {\r\n    this.context.translate(where.x, where.y)\r\n    this.context.scale(howMuch.x, howMuch.y)\r\n    this.context.translate(-where.x, -where.y)\r\n  }\r\n\r\n  translate(x: number, y: number): void {\r\n    this.position.x -= x\r\n    this.position.y -= y\r\n    this.context.translate(x, y)\r\n  }\r\n\r\n  update() {\r\n    if (this.keyTranslateEnabled) {\r\n      this.velocity.add(this.acceleration)\r\n      this.velocity.mult(this.friction)\r\n      this.translate(this.velocity.x, this.velocity.y)\r\n      this.position.add(this.velocity)\r\n      this.acceleration.zero()\r\n    }\r\n    if (this.followingX || this.followingY) {\r\n      const change = Vector2D.sub(this.fLastPosition, this.followedPosition)\r\n      this.fLastPosition = this.followedPosition.copy()\r\n      this.translate(change.x, change.y)\r\n    }\r\n  }\r\n}\r\n\r\nexport default Camera\r\n","export enum LineCap {\r\n  butt = 'butt',\r\n  square = 'square',\r\n  round = 'round'\r\n}\r\n\r\nexport enum LineJoin {\r\n  bevel = 'bevel',\r\n  round = 'round',\r\n  miter = 'miter'\r\n}\r\n\r\nexport enum Pattern {\r\n  repeat = 'repeat',\r\n  repeat_x = 'repeat-x',\r\n  repeat_y = 'repeat-y',\r\n  no_repeat = 'no-repeat'\r\n}\r\n\r\nexport enum weights {\r\n  lighter = 'lighter',\r\n  normal = 'normal',\r\n  bolder = 'bolder',\r\n  bold = 'bold'\r\n}\r\n","import { Vector2D } from 'vector_class'\r\nimport { weights, LineCap, LineJoin } from '../Properties'\r\n\r\nclass Graphic {\r\n  public weight: weights = weights.normal\r\n  public context: any\r\n  public linearGradient: any\r\n  public fill: Boolean = true\r\n  public stroke: Boolean = false\r\n  public anchor: Vector2D = new Vector2D(0.5, 0.5)\r\n  public position: Vector2D = new Vector2D(0, 0)\r\n  public color: String = 'grey'\r\n  public family: String = 'Arial'\r\n  public lineCap: String = LineCap.round\r\n  public lineJoin: String = LineJoin.round\r\n  public lineColor: String = 'rgb(0, 0, 0)'\r\n  public textAlign: String = 'center'\r\n  public shadowColor: String = 'rgba(0, 0, 0, 0)'\r\n  public textBaseline: String = 'middle'\r\n  public size: Number = 12\r\n  public rotation: Number = 0\r\n  public z_index: Number = 1\r\n  public lineWidth: Number = 1\r\n  public miterLimit: Number = 10\r\n  public shadowBlur: Number = 0\r\n  public shadowOffsetX: Number = 0\r\n  public shadowOffsetY: Number = 0\r\n  public childs: Array<any> = []\r\n\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      if (data.stroke !== undefined) {\r\n        if (typeof data.stroke === 'boolean') {\r\n          this.stroke = data.stroke\r\n        } else {\r\n          console.info(`Type of stroke is not boolean`)\r\n        }\r\n      } else {\r\n        this.stroke = false\r\n      }\r\n      if (data.fill !== undefined) {\r\n        if (typeof data.fill === 'boolean') {\r\n          this.fill = data.fill\r\n        } else {\r\n          console.info(`Type of fill is not boolean`)\r\n        }\r\n      } else {\r\n        this.fill = true\r\n      }\r\n      this.weight = data.weights ? data.weights : weights.normal\r\n      this.anchor = data.anchor ? data.anchor : new Vector2D(0.5, 0.5)\r\n      this.position = data.position ? data.position : new Vector2D(0, 0)\r\n      this.z_index = data.z_index ? data.z_index : 1\r\n      this.shadowBlur = data.shadowBlur ? data.shadowBlur : 0\r\n      this.shadowOffsetX = data.shadowOffsetX ? data.shadowOffsetX : 0\r\n      this.shadowOffsetY = data.shadowOffsetY ? data.shadowOffsetY : 0\r\n      this.shadowColor = data.shadowColor ? data.shadowColor : 'rgba(0,0,0,0)'\r\n      this.miterLimit = data.miterLimit ? data.miterLimit : 10\r\n      this.lineCap = data.lineCap ? data.lineCap : LineCap.round\r\n      this.color = data.color ? data.color : 'grey'\r\n      this.family = data.family ? data.family : 'Arial'\r\n      this.lineJoin = data.lineJoin ? data.lineJoin : LineJoin.round\r\n      this.lineColor = data.lineColor ? data.lineColor : 'rgb(50, 50, 50)'\r\n      this.textAlign = data.textAlign ? data.textAlign : 'center'\r\n      this.textBaseline = data.textBaseline ? data.textBaseline : 'middle'\r\n      this.size = data.size ? data.size : 12\r\n      this.rotation = data.rotation ? data.rotation : 0\r\n      this.lineWidth = data.lineWidth ? data.lineWidth : 1\r\n    }\r\n  }\r\n\r\n  add(child: any): void {\r\n    child.context = this.context\r\n    this.childs.push(child)\r\n  }\r\n\r\n  remove(child: any): void {\r\n    this.childs.push(child)\r\n  }\r\n\r\n  getFont() {\r\n    return `${this.weight} ${this.size}px ${this.family}`\r\n  }\r\n\r\n  setStyle(): void {\r\n    this.context.font = this.getFont()\r\n    this.context.fillStyle = this.color\r\n    this.context.lineCap = this.lineCap\r\n    this.context.lineJoin = this.lineJoin\r\n    this.context.strokeStyle = this.lineColor\r\n    this.context.lineWidth = this.lineWidth\r\n    this.context.textAlign = this.textAlign\r\n    this.context.shadowColor = this.shadowColor\r\n    this.context.textBaseline = this.textBaseline\r\n    this.context.miterLimit = this.miterLimit\r\n    this.context.shadowBlur = this.shadowBlur\r\n    this.context.shadowOffsetX = this.shadowOffsetX\r\n    this.context.shadowOffsetY = this.shadowOffsetY\r\n  }\r\n\r\n  /*\r\n      Most be somewhere here\r\n  \r\n      this.childs.forEach(c => c.context = this.context)\r\n      this.childs.forEach(c => c.render())\r\n  \r\n  \r\n  */\r\n\r\n  render(): void {\r\n    // this.context.save()\r\n    this.context.beginPath()\r\n    // if (this.context.fill || this.context.stroke) {\r\n    this.setStyle()\r\n    this.selfRender()\r\n    // }\r\n    // this.context.restore()\r\n  }\r\n\r\n  selfRender() { }\r\n}\r\n\r\nexport default Graphic\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n-------------------------------- GRUPO --------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Graphic from './graphics/Graphic'\r\nimport {Vector2D} from 'vector_class'\r\n\r\nexport default class Group {\r\n  private childs: Array<Graphic> = []\r\n  private context: CanvasRenderingContext2D\r\n  public position: Vector2D = new Vector2D(0, 0) // la posicion tu la tenias publica, asi que no tiene sentido ese metodo de translate que querias hacer\r\n  public scale: Vector2D = new Vector2D(1, 1)\r\n  public rotation: number\r\n\r\n  add(child: Graphic): void {\r\n    this.childs.push(child)\r\n  }\r\n\r\n  scaleObject(child: any) {\r\n    if (child.type == \"arc\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else if (child.type == \"line\") {\r\n      child.end = new Vector(child.end.x * this.scale.x, child.end.y * this.scale.y)\r\n      child.render()\r\n      child.end = new Vector(child.end.x / this.scale.x, child.end.y / this.scale.y)\r\n    } else if (child.type == \"img\" || child.type == \"rect\") {\r\n      child.width *= this.scale.x\r\n      child.height *= this.scale.y\r\n      child.render()\r\n      child.width /= this.scale.x\r\n      child.height /= this.scale.y\r\n    } else if (child.type == \"poligon\") {\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x * this.scale.x, pnt.y * this.scale.y)\r\n      })\r\n      child.render()\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x / this.scale.x, pnt.y / this.scale.y)\r\n      })\r\n    } else if (child.type == \"circle\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else {\r\n      throw \"error, no se puede escalar dicho objeto\"\r\n    }\r\n    return child\r\n  }\r\n\r\n  render(): void {\r\n    // this.context.save()\r\n    this.childs.forEach((child) => {\r\n      child.position.add(this.position)\r\n      child.context = this.context\r\n      child.render()\r\n      child.position.sub(this.position)\r\n    })\r\n    // this.context.restore()\r\n  }\r\n}\r\n\r\n*/","import Graphic from '../graphics/Graphic'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nclass Video extends Graphic {\r\n  public width: number\r\n  public height: number\r\n  public opacity: number\r\n  public video: HTMLVideoElement\r\n  public angle: number\r\n  public type: string = \"img\"\r\n  public data: any\r\n  public ready: boolean = false\r\n  public todo: Array<Function> = []\r\n  public params: Array<any> = []\r\n  public filterEnable: boolean = false\r\n  public filterColors: Array<number> = []\r\n\r\n  constructor(data: any) {\r\n    super(data)\r\n    this.video = document.createElement('video')\r\n    this.video.src = data.src\r\n    this.video.play()\r\n    this.video.crossOrigin = \"Anonymous\"\r\n\r\n    this.video.addEventListener('loadedmetadata', () => {\r\n      this.ready = true\r\n      console.info(`Video ${data.src} correctly loaded.`)\r\n      console.log(this.todo)\r\n      console.log(this.params)\r\n      this.todo.forEach((met, i) => {\r\n        met(...this.params[i])\r\n      })\r\n    })\r\n\r\n    this.video.addEventListener('error', () => {\r\n      console.error('Error loading the video...')\r\n    })\r\n    this.angle = data.angle ? data.angle : 0\r\n    this.opacity = data.opacity ? data.opacity : 1\r\n    this.width = data.width ? data.width : this.video.width\r\n    this.height = data.height ? data.height : this.video.height\r\n  }\r\n\r\n  filter() {\r\n\r\n  }\r\n\r\n  getImageData() {\r\n    const canvas = document.createElement('canvas')\r\n    // console.log(canvas)\r\n    document.body.appendChild(canvas)\r\n    const context = canvas.getContext('2d')\r\n    canvas.width = this.width\r\n    canvas.height = this.height\r\n    context.translate((this.anchor.x * this.width), (this.anchor.y * this.height))\r\n    context.rotate(this.angle)\r\n    context.drawImage(this.video, -(this.anchor.x * this.width), -(this.anchor.y * this.height), this.width, this.height)\r\n    document.body.removeChild(canvas)\r\n    // return context.getImageData( -this.width / 2 , - this.height/2, this.width + this.width/2, this.height + this.height/2)\r\n    return context.getImageData( 0, 0, this.width, this.height)\r\n  }\r\n/*\r\n  removeColor(color: Array<number>) {\r\n    if (this.ready) {\r\n      let image\r\n      if (!this.data) {\r\n        image = this.getImageData()\r\n      } else {\r\n        image = this.data\r\n      }\r\n\r\n      for (let pixel = 0; pixel < image.data.length; pixel += 4) {\r\n        if (image.data[pixel] === color[0] && image.data[pixel + 1] === color[1] && image.data[pixel + 2] === color[2]) {\r\n          image.data[pixel + 3] = 0\r\n        }\r\n      }\r\n\r\n      this.data = image\r\n      this.render = this.renderData\r\n    } else {\r\n      this.todo.push(this.removeColor.bind(this))\r\n      this.params.push([color])\r\n    }\r\n  }\r\n*/\r\n  onClick(func: Function): void {\r\n\r\n  }\r\n  realPosition() {\r\n    return new Vector2D(this.position.x - (this.anchor.x * this.width), this.position.y - (this.anchor.y * this.height))\r\n  }\r\n\r\n  renderData(): void {\r\n    if (this.filterEnable) {\r\n      this.filterColor(this.filterColors[0], this.filterColors[1], this.filterColors[2])\r\n    }\r\n  //  console.log('here')\r\n    //console.log(this.data)\r\n    this.context.beginPath()\r\n    this.context.save()\r\n    // this.context.translate(this.position.x -(this.anchor.x *  this.width), this.position.y -(this.anchor.y *  this.height))\r\n    // this.context.rotate(this.angle)\r\n    // this.context.globalAlpha = this.opacity\r\n    // console.log(this.data)\r\n    this.context.putImageData(this.data, this.position.x -(this.anchor.x *  this.width), this.position.y -(this.anchor.y *  this.height))// -(this.anchor.x *  this.width), -(this.anchor.y *  this.height), this.position.x, this.position.y, this.width, this.height)\r\n    // this.context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height)\r\n    this.context.restore()\r\n  }\r\n\r\n  filterColor(r: number, g: number, b: number) {\r\n    if (this.ready) {\r\n      this.filterEnable = true\r\n      this.filterColors = [r, g, b]\r\n      let image = this.getImageData()\r\n\r\n      for (let pixel = 0; pixel < image.data.length; pixel += 4) {\r\n        image.data[pixel] += r\r\n        image.data[pixel + 1] += g\r\n        image.data[pixel + 2] += b\r\n        // image.data[pixel + 3]\r\n      }\r\n\r\n      this.data = image\r\n      this.render = this.renderData\r\n    } else {\r\n      this.todo.push(this.filterColor.bind(this))\r\n      this.params.push([r, g, b])\r\n    }\r\n    \r\n  }\r\n\r\n  render(): void {\r\n    this.context.beginPath()\r\n    this.context.save()\r\n    this.context.translate(this.position.x, this.position.y)\r\n    this.context.rotate(this.angle)\r\n    this.context.globalAlpha = this.opacity\r\n    this.context.drawImage(this.video, -(this.anchor.x * this.width), -(this.anchor.y * this.height), this.width, this.height)\r\n    // this.context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height)\r\n    this.context.restore()\r\n  }\r\n}\r\n\r\nexport default Video\r\n","import Graphic from '../graphics/Graphic'\r\nimport Events from '../Events'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nenum EventNames {\r\n  mousemove = 'mousemove',\r\n  mousedown = 'mousedown',\r\n  mouseup = 'mouseup',\r\n}\r\n\r\nclass CircleEvents extends Graphic implements Events {\r\n  public radius: number\r\n  // Private\r\n  private moveEnabled: boolean = false\r\n  private hoverEnabled: boolean = false\r\n  private dragEndEnabled: boolean = false\r\n  private dragingEnabled: boolean = false\r\n  private mouseUpEnabled: boolean = false\r\n  private dragStartEnabled: boolean = false\r\n  private mouseDownEnabled: boolean = false\r\n\r\n  private moveMethods: Array<Function>\r\n  private hoverMethods: Array<Function>\r\n  private mouseUpMethods: Array<Function>\r\n  private dragingMethods: Array<Function>\r\n  private dragEndMethods: Array<Function>\r\n  private mouseDownMethods: Array<Function>\r\n  private dragStartMethods: Array<Function>\r\n\r\n  constructor(configuration: any) {\r\n    super(configuration)\r\n    this.moveMethods = []\r\n    this.hoverMethods = []\r\n    this.mouseUpMethods = []\r\n    this.dragingMethods = []\r\n    this.dragEndMethods = []\r\n    this.dragStartMethods =[]\r\n    this.mouseDownMethods = []\r\n\r\n    if (configuration) {\r\n      if (configuration.radius) this.radius = configuration.radius\r\n    }\r\n  }\r\n\r\n  checkIfInside(point: Vector2D): boolean {\r\n    return this.position.distance(point) < this.radius\r\n  }\r\n\r\n  private enableEvent (eventName: EventNames, methods: Array<Function>): void {\r\n    let mouse: Vector2D\r\n\r\n    document.addEventListener(eventName, (event) => {\r\n      mouse = new Vector2D(event.clientX, event.clientY)\r\n      if (this.checkIfInside(mouse)) {\r\n        methods.forEach((method: Function) => method(mouse))\r\n      }\r\n    })\r\n  }\r\n\r\n  mouseDown(func: Function): void {\r\n    if (!this.mouseDownEnabled) {\r\n      this.mouseDownEnabled = !this.mouseDownEnabled\r\n      this.enableEvent(EventNames.mousedown, this.mouseDownMethods)\r\n    }\r\n    this.mouseDownMethods.push(func.bind(this))\r\n  }\r\n\r\n  mouseUp(func: Function): void {\r\n    if (!this.mouseUpEnabled) {\r\n      this.mouseUpEnabled = !this.mouseUpEnabled\r\n      this.enableEvent(EventNames.mouseup, this.mouseUpMethods)\r\n    }\r\n    this.mouseUpMethods.push(func.bind(this))\r\n  }\r\n\r\n  hover(func: Function): void {\r\n    if (!this.hoverEnabled) {\r\n      this.hoverEnabled = !this.hoverEnabled\r\n      this.enableEvent(EventNames.mousemove, this.hoverMethods)\r\n    }\r\n    this.hoverMethods.push(func.bind(this))\r\n  }\r\n\r\n  mouseMove(func: Function): void {\r\n    if (!this.moveEnabled) {\r\n      this.moveEnabled = !this.moveEnabled\r\n      let mouse: any\r\n      document.addEventListener('mousemove', (event) => {\r\n        mouse = new Vector2D(event.clientX, event.clientY)\r\n        this.moveMethods.forEach((method: Function) => method(mouse))\r\n      })\r\n    }\r\n    func = func.bind(this)\r\n    this.moveMethods.push(func)\r\n  }\r\n\r\n\r\n  dragStart(func: Function): void {\r\n    this.dragStartMethods.push(func.bind(this))\r\n  }\r\n\r\n  draging(func: Function): void {\r\n    this.dragingMethods.push(func.bind(this))\r\n  }\r\n\r\n  dragEnd(func: Function): void {\r\n    this.dragEndMethods.push(func.bind(this))\r\n  }\r\n\r\n  enableMouseDrag() {\r\n    let isDraging = false\r\n    let distance: Vector2D = new Vector2D()\r\n\r\n    document.addEventListener('mousemove', (event) => {\r\n      if (isDraging) {\r\n        this.position = Vector2D.add(distance, new Vector2D(event.clientX, event.clientY))\r\n        this.dragingMethods.forEach((meth: Function) => meth())\r\n      }\r\n    })\r\n\r\n    this.mouseDown((mouse: Vector2D) => {\r\n      if (!isDraging) {\r\n        document.body.style.cursor = 'pointer'\r\n        isDraging = true\r\n        distance = Vector2D.sub(this.position, mouse)\r\n        this.position = Vector2D.add(distance, mouse)\r\n        this.dragStartMethods.forEach((meth: Function) => meth())\r\n      }\r\n    })\r\n\r\n    this.mouseUp(() => {\r\n      if (isDraging) {\r\n        document.body.style.cursor = 'default'\r\n        isDraging = false\r\n        this.dragEndMethods.forEach((meth: Function) => meth())\r\n      }\r\n    })\r\n  }  \r\n}\r\n\r\nexport default CircleEvents\r\n","import { Vector2D } from 'vector_class'\r\nimport CircleEvents from '../Events/CircleEvents'\r\n\r\n// Imaginary canvas\r\nconst canvas = document.createElement('canvas')\r\nconst context = canvas.getContext('2d')\r\n\r\nclass Picture extends CircleEvents {\r\n  public data: any\r\n  public angle: number\r\n  public width: number\r\n  public height: number\r\n  public ready: boolean\r\n  public opacity: number\r\n  public anchor: Vector2D\r\n  public params: Array<any>\r\n  public position: Vector2D\r\n  public todo: Array<Function>\r\n  public image: HTMLImageElement\r\n  public context: CanvasRenderingContext2D\r\n\r\n  constructor(data: any) {\r\n    super(data)\r\n    this.position = new Vector2D(0, 0)\r\n    this.anchor = new Vector2D(0, 0)\r\n    this.ready = false\r\n    this.params = []\r\n    this.todo = []\r\n\r\n    this.image = new Image()\r\n    this.image.src = data.src\r\n    console.log(this.image)\r\n    this.image.addEventListener('load', () => {\r\n      this.ready = true\r\n      this.width = data.width ? data.width : this.image.width\r\n      this.height = data.height ? data.height : this.image.height\r\n      this.todo.forEach((met, i) => {\r\n        met(...this.params[i])\r\n      })\r\n    })\r\n\r\n    this.image.addEventListener('error', (err) => {\r\n      console.log(err)\r\n      console.error('Error loading the image...')\r\n    })\r\n\r\n    this.angle = data.angle ? data.angle : 0\r\n    this.opacity = data.opacity ? data.opacity : 1\r\n    this.width = data.width ? data.width : this.image.width\r\n    this.height = data.height ? data.height : this.image.height\r\n  }\r\n\r\n  getImageData() {\r\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight)\r\n    canvas.width = this.width\r\n    canvas.height = this.height\r\n    context.drawImage(this.image, 0, 0, this.width, this.height)\r\n    return context.getImageData(0, 0, this.width, this.height)\r\n  }\r\n/*\r\n  removeColor(color: Array<number>): void {\r\n    if (this.ready) {\r\n      let image\r\n      if (!this.data) {\r\n        image = this.getImageData()\r\n      } else {\r\n        image = this.data\r\n      }\r\n\r\n      for (let pixel = 0; pixel < image.data.length; pixel += 4) {\r\n        if (image.data[pixel] === color[0] && image.data[pixel + 1] === color[1] && image.data[pixel + 2] === color[2]) {\r\n          image.data[pixel + 3] = 0\r\n        }\r\n      }\r\n\r\n      this.data = image\r\n      this.render = this.renderData\r\n    } else {\r\n      this.todo.push(this.removeColor.bind(this))\r\n      this.params.push([color])\r\n    }\r\n  }\r\n*/\r\n  realPosition(): Vector2D {\r\n    return new Vector2D(this.position.x - (this.anchor.x * this.width), this.position.y - (this.anchor.y * this.height))\r\n  }\r\n/*\r\n  renderData(): void {\r\n    //  console.log('here')\r\n    //console.log(this.data)\r\n    this.context.beginPath()\r\n    this.context.save()\r\n    // this.context.translate(this.position.x -(this.anchor.x *  this.width), this.position.y -(this.anchor.y *  this.height))\r\n    //this.context.rotate(this.angle)\r\n    // this.context.globalAlpha = this.opacity\r\n    // console.log(this.data)\r\n    this.context.putImageData(this.data, this.position.x - (this.anchor.x * this.width), this.position.y - (this.anchor.y * this.height))// -(this.anchor.x *  this.width), -(this.anchor.y *  this.height), this.position.x, this.position.y, this.width, this.height)\r\n    // this.context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height)\r\n    this.context.restore()\r\n  }\r\n*/\r\n  render(): void {\r\n    this.context.beginPath()\r\n    this.context.save()\r\n    this.context.translate(this.position.x, this.position.y)\r\n    this.context.rotate(this.angle)\r\n    this.context.globalAlpha = this.opacity\r\n    this.context.drawImage(this.image, -(this.anchor.x * this.width), -(this.anchor.y * this.height), this.width, this.height)\r\n    // this.context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height)\r\n    this.context.restore()\r\n  }\r\n}\r\n\r\nexport default Picture\r\n","import Render from './Render'\r\nimport Camera from './Camera'\r\nimport Video from './Media/Video'\r\nimport Picture from './Media/Picture'\r\nimport Graphic from './graphics/Graphic'\r\n\r\nclass Scene {\r\n  public backgroundColor: string\r\n  public camera: Camera\r\n  public renderer: Render\r\n  public childs: Array<any>\r\n  public frameRate: number\r\n  public interval: any\r\n  public context: CanvasRenderingContext2D\r\n\r\n  constructor(renderer: Render) {\r\n    this.childs = []\r\n    this.frameRate = 0\r\n    this.renderer = renderer\r\n    this.backgroundColor = 'black'\r\n    this.context = this.renderer.context\r\n    this.camera = new Camera(this.context)\r\n  }\r\n\r\n  dataLoaded(): boolean {\r\n    // Gets all the pictures and videos from the scene.\r\n    const elements = this.childs.filter((child) => {\r\n      if (child instanceof Picture) return true\r\n      if (child instanceof Video) return true\r\n      return false\r\n    })\r\n\r\n    // If there is an image that is not loaded returns false\r\n    return !elements.some((element) => !element.ready)\r\n  }\r\n\r\n  add(element: any): void {\r\n    element.context = this.context\r\n    this.childs.push(element)\r\n    this.organizeByZindex()\r\n  }\r\n\r\n  remove(element: Graphic): void {\r\n    let index = this.childs.indexOf(element)\r\n    if (index >= 0) {\r\n      this.childs.splice(index, 1)\r\n    }\r\n  }\r\n\r\n  clearScreen(): void {\r\n    this.context.save()\r\n    this.context.setTransform(1, 0, 0, 1, 0, 0)\r\n    this.context.fillStyle = this.backgroundColor\r\n    this.context.fillRect(0, 0, window.innerWidth, window.innerHeight)\r\n    this.context.restore()\r\n  }\r\n\r\n  smoth(state: boolean): void {\r\n    if (this.context.imageSmoothingEnabled) {\r\n      this.context.imageSmoothingEnabled = state\r\n    } else if (this.context.mozImageSmoothingEnabled) {\r\n      this.context.mozImageSmoothingEnabled = state\r\n    } else if (this.context.webkitImageSmoothingEnabled) {\r\n      this.context.webkitImageSmoothingEnabled = state\r\n    }\r\n  }\r\n\r\n  organizeByZindex(): void {\r\n    this.childs.sort((a, b) => a.z_index - b.z_index)\r\n  }\r\n\r\n  autoRender(func?: Function): void {\r\n    this.interval = setInterval(() => {\r\n      if (func) func()\r\n      this.render()\r\n    }, this.frameRate)\r\n  }\r\n\r\n  stopAutoRender(): void {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  render(): void {\r\n    if (!this.dataLoaded()) {\r\n      console.info('Waiting for images to load...')\r\n      setTimeout(this.render.bind(this), 100)\r\n    } else {\r\n      this.clearScreen()\r\n      this.childs.forEach(child => child.render())\r\n      this.camera.update()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Scene\r\n","import Scene from './Scene'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nclass Render {\r\n  public scene: Scene\r\n  public canvas: HTMLCanvasElement\r\n  public context: CanvasRenderingContext2D\r\n  public frameRate: number = 1000 / 60\r\n\r\n  constructor(canvas?: HTMLCanvasElement, width?: number, height?: number) {\r\n    if (canvas) {\r\n      this.canvas = canvas\r\n    } else {\r\n      this.canvas = document.createElement('canvas')\r\n      document.body.appendChild(this.canvas)\r\n    }\r\n\r\n    if (width && height) {\r\n      this.canvas.width = width\r\n      this.canvas.height = height\r\n    } else {\r\n      this.canvas.width = window.innerWidth\r\n      this.canvas.height = window.innerHeight\r\n    }\r\n\r\n    this.context = this.canvas.getContext('2d')\r\n    window.addEventListener('resize', () => {\r\n      this.canvas.width = window.innerWidth\r\n      this.canvas.height = window.innerHeight\r\n    })\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.canvas.width\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.canvas.height\r\n  }\r\n\r\n  getSize(): Vector2D {\r\n    return new Vector2D(\r\n      this.canvas.width,\r\n      this.canvas.height)\r\n  }\r\n\r\n  getCanvasImage(): string {\r\n    return this.canvas.toDataURL()\r\n  }\r\n\r\n  fullScreen(): void {\r\n    let isFull = false\r\n    document.addEventListener('click', () => {\r\n      if (!isFull) {\r\n        this.canvas.webkitRequestFullScreen()\r\n      }\r\n    })\r\n  }\r\n\r\n  setScene(scene: Scene): void {\r\n    this.scene = scene\r\n    this.scene.renderer = this\r\n    this.scene.context = this.context\r\n    this.scene.smoth(false)\r\n  }\r\n}\r\n\r\nexport default Render\r\n","import Graphic from './graphics/Graphic'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nclass LinearGradient {\r\n  public context: CanvasRenderingContext2D\r\n  public position: Vector2D\r\n  public gradient: any\r\n  public size: Vector2D\r\n\r\n  constructor(config?: any) {\r\n    this.context = config.context\r\n    this.size = config.size ? config.size : new Vector2D(100, 100)\r\n    this.gradient = this.context.createLinearGradient(this.position.x, this.position.y, this.size.x, this.size.y)\r\n    let counter = 0\r\n    for (let color of config.colors) {\r\n      this.gradient.addColorStop(counter, color)\r\n      // console.log(1 / config.colors.length)\r\n      counter += 1 / config.colors.length\r\n    }\r\n  }\r\n}\r\n\r\nexport default LinearGradient\r\n","class Color {\r\n  public red  : number\r\n  public green: number\r\n  public blue : number\r\n  public alpha: number\r\n\r\n  constructor (red = 0, green = 0, blue = 0, alpha = 1) {\r\n    this.red   = Math.round(red * 255)\r\n    this.green = Math.round(green * 255)\r\n    this.blue  = Math.round(blue * 255)\r\n    this.alpha = alpha\r\n  \r\n    if (this.red > 255) this.red = 255\r\n    else if (this.red < 0) this.red = 0\r\n\r\n    if (this.green > 255) this.green = 255\r\n    else if (this.green < 0) this.green = 0\r\n\r\n    if (this.blue > 255) this.blue = 255\r\n    else if (this.blue < 0) this.blue = 0\r\n\r\n    if (this.alpha > 1) this.alpha = 1\r\n    else if (this.alpha < 0) this.alpha = 0\r\n  }\r\n\r\n  setRed (color: number) {\r\n    if (color > 255) {\r\n      this.red = 255\r\n    } else if (color < 0) {\r\n      this.red = 0\r\n    } else {\r\n      this.red = color\r\n    }\r\n  }\r\n\r\n  setGreen (color: number) {\r\n    if (color > 255) {\r\n      this.green = 255\r\n    } else if (color < 0) {\r\n      this.green = 0\r\n    } else {\r\n      this.green = color\r\n    }\r\n  }\r\n\r\n  setBlue (color: number) {\r\n    if (color > 255) {\r\n      this.blue = 255\r\n    } else if (color < 0) {\r\n      this.blue = 0\r\n    } else {\r\n      this.blue = color\r\n    }\r\n  }\r\n\r\n  rgba () {\r\n    return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`\r\n  }\r\n\r\n  rgb () {\r\n    return `rgb(${this.red}, ${this.green}, ${this.blue})`\r\n  }\r\n\r\n  static random () {\r\n    return new Color(Math.random(), Math.random(), Math.random())\r\n  }\r\n}\r\n\r\nexport default Color\r\n","import { Vector2D } from 'vector_class'\r\n\r\nclass Animation {\r\n  public loop: boolean = true\r\n  public size: Vector2D = new Vector2D(32, 32)\r\n  public scale: Vector2D\r\n  public frameRate: number\r\n  public x: number\r\n  public y: number\r\n  public image: HTMLImageElement\r\n  public interval: any\r\n  public frame:Vector2D = new Vector2D(0, 0)\r\n  public animations: any\r\n  public animationPlaying: boolean = false\r\n  public context: CanvasRenderingContext2D\r\n  public position: Vector2D  \r\n  constructor(configuration: any) {\r\n    this.load(configuration.src)\r\n    this.loop = configuration.loop ? configuration.loop : true\r\n    this.size = configuration.size ? configuration.size : new Vector2D(32, 32)\r\n    this.scale = configuration.scale ? configuration.scale : new Vector2D(1, 1)\r\n    this.frameRate = configuration.frameRate ? configuration.frameRate : 24\r\n    this.animations = configuration.animations\r\n    this.x = 0\r\n    this.y = 0\r\n  }\r\n\r\n  playAnimation (name: string): void {    \r\n    if (!this.animationPlaying) {\r\n      this.animationPlaying = true\r\n      this.frame.x = 0\r\n      this.frame.y = this.animations[name][1]\r\n      this.reproduceAnimation(name)\r\n    }\r\n  }\r\n\r\n  reproduceAnimation (name: string): void {\r\n    this.x = this.size.x * this.frame.x\r\n    this.y = this.size.y * this.frame.y\r\n    this.frame.x += 1\r\n    if (this.frame.x >= this.animations[name][0]) {\r\n      this.animationPlaying = false\r\n    } else {\r\n      setTimeout(() => this.reproduceAnimation(name), this.frameRate)\r\n    }\r\n  }\r\n\r\n  mouseDown() {\r\n\r\n  }\r\n\r\n  onClick(func: Function): void { }\r\n\r\n  load(src: string): void {\r\n    this.image = new Image()\r\n    this.image.src = src\r\n  }\r\n\r\n  getSize() {\r\n    return new Vector2D(this.size.x * this.scale.x, this.size.y * this.scale.y)\r\n  }\r\n\r\n  render() {\r\n    this.context.drawImage(\r\n      this.image,\r\n      this.x,\r\n      this.y,\r\n      this.size.x, this.size.y,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.size.x * this.scale.x,\r\n      this.size.y * this.scale.y\r\n    )\r\n  }\r\n\r\n  destroy() {\r\n    clearInterval(this.interval)\r\n  }\r\n}\r\n\r\nexport default Animation\r\n","import Graphic from './Graphic'\r\nimport { Vector2D } from 'vector_class'\r\nimport LinearGradient from '../LinearGradient'\r\n\r\nclass Ellipse extends Graphic {\r\n  public radiusX: number = 10\r\n  public radiusY: number = 5\r\n\r\n  constructor(configuration?: any) {\r\n    super(configuration)\r\n    if (configuration) {\r\n      this.lineWidth = configuration.lineWidth ? configuration.lineWidth : this.lineWidth\r\n      this.lineColor = configuration.lineColor ? configuration.lineColor : this.lineColor\r\n      this.radiusX = configuration.radiusX ? configuration.radiusX : this.radiusX\r\n      this.radiusY = configuration.radiusY ? configuration.radiusY : this.radiusY\r\n      this.stroke = configuration.stroke ? configuration.stroke : this.stroke\r\n      this.color = configuration.color ? configuration.color : this.color\r\n      this.fill = configuration.fill ? configuration.fill : this.fill\r\n      if (configuration.linearGradient) {\r\n        this.linearGradient = configuration.linearGradient\r\n        // this.render = this.renderGradient\r\n      }\r\n    }\r\n  }\r\n\r\n  renderGradient () {\r\n    this.color = new LinearGradient({\r\n      context: this.context,\r\n      colors: this.linearGradient,\r\n      size: new Vector2D(this.position.x, this.position.y + this.radiusY),\r\n      position: new Vector2D(this.position.x, this.position.y - this.radiusY / 2)\r\n    }).gradient\r\n\r\n    if (this.fill) {\r\n      this.context.beginPath()\r\n      this.context.fillStyle = this.color\r\n      this.context.ellipse(this.position.x, this.position.y, this.radiusX, this.radiusY, 0, 0, 2 * Math.PI)\r\n      this.context.fill()\r\n    }\r\n    if (this.stroke) {\r\n      this.context.lineWidth = this.lineWidth\r\n      this.context.strokeStyle = this.lineColor\r\n      this.context.stroke()\r\n    }\r\n  }\r\n\r\n  render(): void {\r\n    this.renderGradient()\r\n    /*\r\n    if (this.fill) {\r\n      this.context.beginPath()\r\n      this.context.fillStyle = this.color\r\n      this.context.ellipse(this.position.x, this.position.y, this.radiusX, this.radiusY, 0, 0, 2 * Math.PI)\r\n      this.context.fill()\r\n    }\r\n    if (this.stroke) {\r\n      this.context.lineWidth = this.lineWidth\r\n      this.context.strokeStyle = this.lineColor\r\n      this.context.stroke()\r\n    }\r\n    */\r\n  }\r\n}\r\n\r\nexport default Ellipse\r\n","import Graphic from './Graphic'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nclass Poligon extends Graphic {\r\n  public cords: Array<Vector2D>\r\n\r\n  constructor(configuration: any) {\r\n    super(configuration)\r\n    if (configuration.color) this.color = configuration.color\r\n    if (configuration.stroke) this.stroke = configuration.stroke\r\n    if (configuration.cords) this.cords = configuration.cords.slice(1, configuration.cords.length)\r\n    if (configuration.fill) this.fill = configuration.fill\r\n    this.position = configuration.cords.slice[0]\r\n    this.cords.filter((pnt) => {\r\n      return new Vector2D(pnt.x - this.position.x, pnt.y - this.position.y)\r\n    })\r\n  }\r\n\r\n  render(): void {\r\n    this.context.beginPath()\r\n    this.context.strokeStyle = this.lineColor\r\n    this.context.lineCap = this.lineCap\r\n    this.context.fillStyle = this.color\r\n    this.context.lineJoin = this.lineJoin\r\n    this.context.moveTo(this.cords[0].x, this.cords[0].y)\r\n    for (var i = 0; i < this.cords.length; i++) {\r\n      this.context.lineTo(this.cords[i].x + this.position.x, this.cords[i].y + this.position.y)\r\n    }\r\n\r\n    this.context.closePath()\r\n    this.context.fill()\r\n    if (this.stroke) this.context.stroke\r\n  }\r\n}\r\n\r\nexport default Poligon\r\n","\r\nimport CircleEvents from '../Events/CircleEvents'\r\n\r\nclass Circle extends CircleEvents {\r\n  public radius: number = 5\r\n\r\n  constructor (config?: any) {\r\n    super(config)\r\n    if (config) {\r\n      this.radius = config.radius ? config.radius : 5\r\n    }\r\n  }\r\n\r\n  selfRender(): void {\r\n    this.context.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI)\r\n\r\n    if (this.fill) {\r\n      this.context.fill()\r\n    }\r\n\r\n    if (this.stroke) {\r\n      this.context.stroke()\r\n    }\r\n  } \r\n}\r\n\r\nexport default Circle\r\n","import Graphic from './Graphic'\r\n\r\nclass Rect extends Graphic {\r\n  public width: number = 1\r\n  public height: number = 1\r\n\r\n  constructor(data: any) {\r\n    super(data)\r\n    if (data.width) this.width = data.width\r\n    if (data.height) this.height = data.height\r\n  }\r\n\r\n  selfRender(): void {\r\n    if (this.fill) {\r\n      this.context.fillRect(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.width,\r\n        this.height\r\n      )\r\n    }\r\n\r\n    if (this.stroke) {\r\n      this.context.strokeRect(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.width,\r\n        this.height\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Rect\r\n","import Graphic from './Graphic'\r\nimport {Vector2D} from 'vector_class'\r\n\r\nclass Line extends Graphic {\r\n  public start: Vector2D = new Vector2D(0, 0)\r\n  public end: Vector2D = new Vector2D(1, 1)\r\n\r\n  constructor(data: any) {\r\n    super(data)\r\n    if (data) {\r\n      if (data.start) this.start = data.start\r\n      if (data.end) this.end = data.end\r\n      if (data.color) this.color = data.color\r\n      if (data.start) this.position = data.start\r\n      this.end = new Vector2D(this.end.x - this.start.x, this.end.y - this.start.y)\r\n    }\r\n  }\r\n\r\n  selfRender(): void {\r\n    /*\r\n    this.context.strokeStyle = this.color\r\n    this.context.lineWidth = this.width\r\n    this.context.lineCap = this.lineCap\r\n    this.context.lineJoin = this.lineJoin\r\n    */\r\n   this.context.beginPath()\r\n    this.context.moveTo(this.position.x, this.position.y)\r\n    this.context.lineTo(this.end.x + this.position.x, this.end.y + this.position.y)\r\n    this.context.stroke()\r\n  }\r\n}\r\n\r\nexport default Line\r\n","import Graphic from './Graphic'\r\n\r\nclass Text extends Graphic {\r\n  public content: string\r\n  public fontConfig: string = ''\r\n  public lineHeight: number = 12\r\n  public maxWidth: number = 500\r\n\r\n  constructor(configuration: any) {\r\n    super(configuration)\r\n    if (configuration) {\r\n      this.content = configuration.content ? configuration.content : ''\r\n    }\r\n  }\r\n\r\n  wrapText() {\r\n    let x = this.position.x\r\n    let y = this.position.y\r\n    var words = this.content.split(' ')\r\n    var line = ''\r\n  \r\n    for(var n = 0; n < words.length; n++) {\r\n      var testLine = line + words[n] + ' '\r\n      var metrics = this.context.measureText(testLine)\r\n      var testWidth = metrics.width\r\n      if (testWidth > this.maxWidth && n > 0) {\r\n        this.context.fillText(line, x, y)\r\n        line = words[n] + ' '\r\n        y += this.lineHeight\r\n      }\r\n      else {\r\n        line = testLine\r\n      }\r\n    }\r\n    this.context.fillText(line, x, y)\r\n  }\r\n\r\n  render(): void {\r\n    this.context.fillStyle = this.color\r\n    this.context.font = `${this.weight} ${this.size}px ${this.family}`\r\n    this.context.textAlign = this.textAlign\r\n    this.context.textBaseline = this.textBaseline\r\n    if (this.stroke) {\r\n      this.context.strokeText(this.content, this.position.x, this.position.y)\r\n    }\r\n    this.context.fillText(this.content, this.position.x, this.position.y)\r\n  }\r\n}\r\n\r\nexport default Text\r\n","import CircleEvents from '../Events/CircleEvents'\r\n\r\nclass Arc extends CircleEvents {\r\n  public endAngle: number = 0\r\n  public startAngle: number = Math.PI\r\n\r\n  constructor(configuration?: any) {\r\n    super(configuration)\r\n    if (configuration) {\r\n      this.endAngle = configuration.endAngle ? configuration.endAngle : 0\r\n      this.startAngle = configuration.startAngle ? configuration.startAngle : Math.PI\r\n    }\r\n  }\r\n  \r\n  selfRender(): void {\r\n    this.context.arc(0, 0, this.radius, this.endAngle, this.startAngle, true)\r\n\r\n    if (this.fill) {\r\n      this.context.fill()\r\n    }\r\n\r\n    if (this.stroke) {\r\n      this.context.stroke()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Arc\r\n","import Graphic from './Graphic'\r\n\r\nclass BezierCurve extends Graphic {\r\n  public cords: Array<Array<number>>\r\n\r\n  constructor (config: any) {\r\n    super(config)\r\n    this.cords = config.cords ? config.cords : [[10, 10], [80, 20], [30, 30]]\r\n  }\r\n\r\n  render () {\r\n    this.context.save()\r\n    this.context.beginPath()\r\n    this.context.lineCap = this.lineCap\r\n    this.context.lineWidth = this.lineWidth\r\n    this.context.strokeStyle = this.lineColor\r\n    this.context.lineJoin = this.lineJoin\r\n    this.context.translate(this.position.x, this.position.y)\r\n    this.context.bezierCurveTo(this.cords[0][0], this.cords[0][1], this.cords[1][0], this.cords[1][1], this.cords[2][0], this.cords[2][1])\r\n    this.context.stroke()\r\n    this.context.restore()\r\n  }\r\n}\r\n\r\nexport default BezierCurve\r\n","import Graphic from './Graphic'\r\n\r\nclass QuadraticCurve extends Graphic {\r\n  public color: string\r\n  public cords: Array<Array<number>>\r\n  public width: number\r\n\r\n  constructor (config: any) {\r\n    super(config)\r\n    this.color = config.color ? config.color : 'black'\r\n    this.width = config.width ? config.width : 5\r\n    this.cords = config.cords ? config.cords : [[20, 100], [200, 20]]\r\n  }\r\n\r\n  render () {\r\n    this.context.save()\r\n    this.context.beginPath()\r\n    this.context.lineCap = this.lineCap\r\n    this.context.lineJoin = this.lineJoin\r\n    this.context.lineWidth = this.width\r\n    this.context.strokeStyle = this.color\r\n    this.context.moveTo(this.position.x, this.position.y)\r\n    this.context.quadraticCurveTo(this.cords[0][0], this.cords[0][1], this.cords[1][0], this.cords[1][1])\r\n    this.context.stroke()\r\n    this.context.restore()\r\n  }\r\n}\r\n\r\nexport default QuadraticCurve\r\n","\r\ninterface EventsManager {\r\n  mousemove: Array<Function>,\r\n  mouseup: Array<Function>,\r\n  mousedown: Array<Function>,\r\n  mousemoveActive: Boolean,\r\n  mouseupActive: Boolean,\r\n  mousedownActive: Boolean,\r\n\r\n  keypress: Array<Function>,\r\n  keyup: Array<Function>,\r\n  keydown: Array<Function>,\r\n  keypressActive: Boolean,\r\n  keyupActive: Boolean,\r\n  keydownActive: Boolean,\r\n}\r\n\r\nclass Event {\r\n  public events: any = {\r\n    // Mouse\r\n    mousemove: [],\r\n    mouseup: [],\r\n    mousedown: [],\r\n    mousemoveActive: false,\r\n    mousedownActive: false,\r\n    mouseupActive: false,\r\n\r\n    // KeyBoard\r\n    keypress: [],\r\n    keyup: [],\r\n    keydown: [],\r\n    keypressActive: false,\r\n    keydownActive: false,\r\n    keyupActive: false\r\n  }\r\n\r\n  public initEvent (name: string): void {\r\n    document.addEventListener(name, (event) => {\r\n      this.events[name].forEach((func: Function) => func(this, event))\r\n    })\r\n  }\r\n}\r\n\r\nexport default Event\r\n","\r\nimport { Vector2D } from 'vector_class'\r\nimport Event from './Event'\r\n\r\nclass Mouse extends Event {\r\n  public position: Vector2D = new Vector2D(0, 0)\r\n  public clicked: boolean = false\r\n\r\n  constructor () {\r\n    super()\r\n    this.move((self: any, event: any) => {\r\n      this.position.x = event.clientX\r\n      this.position.y = event.clientY\r\n    })\r\n  }\r\n\r\n  move (func: Function): void {\r\n    if (!this.events.mousemoveActive) {\r\n      this.initEvent('mousemove')\r\n      this.events.mousemoveActive = true\r\n    }\r\n    this.events.mousemove.push(func)\r\n  }\r\n\r\n  up (func: Function): void {\r\n    if (!this.events.mouseupActive) {\r\n      this.initEvent('mouseup')\r\n      this.events.mouseupActive = true\r\n    }\r\n  }\r\n\r\n  down (func: Function): void {\r\n    if (!this.events.mousedownActive) {\r\n      this.initEvent('mousedown')\r\n      this.events.mousedownActive = true\r\n    }\r\n  }\r\n}\r\n\r\nexport default Mouse\r\n","\r\nimport Event from './Event'\r\n\r\nclass KeyBoard extends Event{\r\n  public keys: Array<string> = []\r\n\r\n  press (key: string, func: Function) {\r\n    const func2 = (self: any, event: any) => {\r\n      // console.log(event.key === key)\r\n      // console.log(event.key, key)\r\n      if (event.key === key) {\r\n        // console.log(func)\r\n        func(this, event)\r\n      }\r\n    }\r\n\r\n    if (!this.events.keypressActive) {\r\n      this.events.keypressActive = true\r\n      this.initEvent('keypress')\r\n    }\r\n    this.events.keypress.push(func2)\r\n  }\r\n\r\n  down (key: string, func: Function) {\r\n    func = (self: any, event: any) => {\r\n      if (event.key === key) func(this, event)\r\n    }\r\n\r\n    if (!this.events.keydownActive) {\r\n      this.events.keydownActive = true\r\n      this.initEvent('keydown')\r\n    }\r\n    this.events.keydown.push(func)\r\n  }\r\n\r\n  up (key: string, func: Function) {\r\n    const func2 = (self: any, event: any) => {\r\n      if (event.key === key) func(this, event)\r\n    }\r\n\r\n    if (!this.events.keyupActive) {\r\n      this.events.keyupActive = true\r\n      this.initEvent('keyup')\r\n    }\r\n    this.events.keyup.push(func2)\r\n  }\r\n}\r\n\r\nexport default KeyBoard\r\n","const defaultCss = document.createElement('style')\r\ndefaultCss.type = 'text/css'\r\ndefaultCss.innerHTML = `\r\n* {\r\n  margin:0%;\r\n  padding: 0%;\r\n}\r\n\r\ncanvas {\r\n  display: block;\r\n}\r\n`\r\n\r\ndocument.head.appendChild(defaultCss)\r\n\r\nimport Scene from './Scene'\r\nimport Render from './Render'\r\nimport LinearGradient from './LinearGradient'\r\nimport { Vector2D } from 'vector_class'\r\nimport Color from './Color'\r\n\r\n// Graphics\r\nimport Animation from './Media/Animation'\r\nimport Graphic from './graphics/Graphic'\r\nimport Ellipse from './graphics/Ellipse'\r\nimport Poligon from './graphics/Poligon'\r\nimport Picture from './Media/Picture'\r\nimport Circle from './graphics/Circle'\r\nimport Video from './Media/Video'\r\nimport Rect from './graphics/Rect'\r\nimport Line from './graphics/Line'\r\nimport Text from './graphics/Text'\r\nimport Arc from './graphics/Arc'\r\nimport BezierCurve from './graphics/BezierCurve'\r\nimport QuadraticCurve from './graphics/QuadraticCurve'\r\n\r\n// Events\r\nimport Mouse from './Events/Mouse'\r\nimport KeyBoard from './Events/KeyBoard'\r\n\r\nconst mouse = new Mouse()\r\nconst keyboard = new KeyBoard()\r\n\r\n// _______________________________\r\nconsole.log(\"Hola\")\r\n\r\nconst render = new Render()\r\nconst scene = new Scene(render)\r\n\r\nlet url = require(\"../apple.png\")\r\nconst pic = new Picture({\r\n  src: url\r\n})\r\n\r\nrender.setScene(scene)\r\nscene.add(pic)\r\nscene.autoRender()\r\n// _______________________________\r\n\r\nexport {\r\n  QuadraticCurve,\r\n  Video,\r\n  BezierCurve,\r\n  LinearGradient,\r\n  Ellipse,\r\n  mouse,\r\n  keyboard,\r\n  Color,\r\n  Animation,\r\n  Rect,\r\n  Circle,\r\n  Vector2D,\r\n  Line,\r\n  Poligon,\r\n  Picture,\r\n  Text,\r\n  Arc,\r\n  Graphic,\r\n  Scene,\r\n  Render\r\n}\r\n"]}