{"dependencies":[{"name":"C:\\Users\\Luis Herasme\\Desktop\\JavaSctipGL\\tsconfig.json","includedInParent":true,"mtime":1522616336000},{"name":"C:\\Users\\Luis Herasme\\Desktop\\JavaSctipGL\\package.json","includedInParent":true,"mtime":1531328507309},{"name":"./src/index","loc":{"line":3,"column":22},"parent":"C:\\Users\\Luis Herasme\\Desktop\\JavaSctipGL\\index.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\JavaSctipGL\\src\\index.ts"}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\nvar index_1 = require(\"./src/index\");\n//const render = new Render('lienzo')\n/*\r\nsetInterval(() => {\r\n  const w = new Wind('asd')\r\n  w.setMsg('You have won gold')\r\n}, 10000)\r\n*/\nvar render = new index_1.Render('lienzo');\nrender.add(new index_1.Picture({\n  src: './apple.png'\n}));\n/*\r\nimport { Render, Line, Circle, Color, Vector, Rect, Text } from './src/index'\r\nconst render = new Render('lienzo')\r\n\r\nlet balls = []\r\n\r\nclass _Circle extends Circle {\r\n  public vel: Vector = new Vector()\r\n  public acc: Vector = new Vector()\r\n  constructor (data) {\r\n    super(data)\r\n  }\r\n  addForce(f: Vector) {\r\n    this.acc.add(f)\r\n  }\r\n  update() {\r\n   // this.c.alpha = 5 / this.vel.mag()\r\n    //this.color = this.c.rgba()\r\n    this.position.add(this.vel)\r\n    this.vel.mult(0.75)\r\n    this.vel.add(this.acc)\r\n    this.acc.zero()\r\n  }\r\n}\r\n\r\nconst spacing = 35\r\n\r\nfor (let y = 0; y < 10; y++) {\r\n  for (let x = 0; x < 10; x++) {\r\n    const color = Color.random()\r\n    const circle = new _Circle({\r\n      position: new Vector((x * spacing) + 100, (spacing * y) + 100 ),\r\n      color: 'white',//color.rgb(),\r\n      z_index: 5\r\n    })\r\n    circle.c = color\r\n    balls.push(circle)\r\n    render.add(circle)\r\n  }\r\n}\r\n\r\nclass _Line extends Line{\r\n  public b1: _Circle\r\n  public b2: _Circle\r\n  public rest\r\n  public k = 0.0005\r\n\r\n  constructor (data) {\r\n    super({\r\n      start: data.start.position,\r\n      end: data.end.position\r\n    })\r\n  \r\n    this.lineColor = data.lineColor\r\n    this.b1 = data.start\r\n    this.b2 = data.end\r\n    this.lineWidth = data.lineWidth\r\n    this.rest = Vector.distance(data.start.position, data.end.position)\r\n  }\r\n\r\n  update () {\r\n    \r\n    let v = Vector.sub(this.b1.position, this.b2.position)\r\n    v.normalize()\r\n    let x = (this.rest - Vector.distance(this.b1.position, this.b2.position))\r\n    v.mult(x)\r\n    v.mult(this.k)\r\n  \r\n    v.mult(0.25)\r\n\r\n    this.b1.addForce(v)\r\n    v.inverse()\r\n    this.b2.addForce(v)\r\n  }\r\n}\r\nlet links = []\r\n\r\nfor (let b1 = 0; b1 < balls.length; b1++) {\r\n  balls[b1].lines = []\r\n  for (let b2 = 0; b2 < balls.length; b2++) {\r\n    if (b1 != b2) {\r\n      const code = String(b1) + String(b2)\r\n      const iCode = String(b1) + String(b2)\r\n      if (!links.includes(code) || !links.includes(iCode)) {\r\n        const line = new _Line({\r\n          start: balls[b1],\r\n          end: balls[b2],\r\n          lineColor: balls[b1].color,\r\n          lineWidth: 0.25\r\n        })\r\n        render.add(line)\r\n        balls[b1].lines.push({line, ball: balls[b2]})\r\n        links.push(code)\r\n        links.push(iCode)\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  balls[b1].mouseMove((mouse) => {\r\n    balls[b1].addForce(Vector.mult(Vector.normalize(Vector.sub(balls[b1].position, mouse)), 2))\r\n  })\r\n}\r\n\r\nrender.autoRender(() => {\r\n  balls.forEach(ball => {\r\n    ball.update()\r\n    ball.lines.forEach((line) => {\r\n      \r\n      line.line.end = Vector.sub(line.ball.position, ball.position)\r\n      line.line.update()\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\n/*\r\n\r\nimport { Render, Color, Vector, Rect, Text } from './src/index'\r\n\r\nconst render = new Render('lienzo', 130, 100)\r\nconst scale = 1\r\nlet balls = []\r\nfor (let x = 0; x < render.getWidth() / scale; x++) {\r\n    for (let y = 0; y < render.getHeight() / scale; y++) {\r\n      let color = Color.random()\r\n     // color.setRed(255)\r\n      color.setBlue(255)\r\n      const ball = new Rect({\r\n        position: new Vector((x * scale), (y * scale)),\r\n        color: color.rgb(),\r\n        //radius: scale / 2\r\n         width: scale,\r\n         height: scale\r\n      })\r\n      ball.c = color\r\n      balls.push(ball)\r\n      render.add(ball)\r\n  }\r\n}\r\n\r\n\r\ndocument.addEventListener('mousemove', (e) => {\r\n  const mouse = new Vector(e.clientX, e.clientY)\r\n  balls.forEach((ball) => {\r\n    ball.color = `rgba(${ball.c.red}, ${ball.c.green}, ${ball.c.blue}, ${+mouse.distance(ball.position) / render.getWidth() * 4})`\r\n  })\r\n  render.render()\r\n})\r\n\r\nrender.add(new Text({\r\n  content: 'Hola mundo',\r\n  size: 24,\r\n  position: new Vector(300, 300)\r\n}))\r\n*/\n// render.autoRender()","map":{"mappings":[{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":4}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":14}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":22}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":35}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":4,"column":36}},{"source":"index.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"index.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"index.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":12,"column":4}},{"source":"index.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":12,"column":13}},{"source":"index.ts","name":null,"original":{"line":10,"column":19},"generated":{"line":12,"column":17}},{"source":"index.ts","name":null,"original":{"line":10,"column":19},"generated":{"line":12,"column":25}},{"source":"index.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":12,"column":31}},{"source":"index.ts","name":null,"original":{"line":10,"column":26},"generated":{"line":12,"column":32}},{"source":"index.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":12,"column":40}},{"source":"index.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":12,"column":41}},{"source":"index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"index.ts","name":null,"original":{"line":11,"column":7},"generated":{"line":13,"column":7}},{"source":"index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":13,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":13,"column":11}},{"source":"index.ts","name":null,"original":{"line":11,"column":15},"generated":{"line":13,"column":15}},{"source":"index.ts","name":null,"original":{"line":11,"column":15},"generated":{"line":13,"column":23}},{"source":"index.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":13,"column":30}},{"source":"index.ts","name":null,"original":{"line":11,"column":23},"generated":{"line":13,"column":31}},{"source":"index.ts","name":null,"original":{"line":12,"column":2},"generated":{"line":14,"column":0}},{"source":"index.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":14,"column":7}},{"source":"index.ts","name":null,"original":{"line":11,"column":23},"generated":{"line":15,"column":0}},{"source":"index.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":15,"column":1}},{"source":"index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":15,"column":2}},{"source":"index.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"index.ts","name":null,"original":{"line":150,"column":0},"generated":{"line":148,"column":0}},{"source":"index.ts","name":null,"original":{"line":190,"column":0},"generated":{"line":188,"column":0}}],"sources":{"index.ts":"\r\nimport { Render, Line, Circle, Color, Picture, Rect, Text, Wind } from './src/index'\r\n//const render = new Render('lienzo')\r\n/*\r\nsetInterval(() => {\r\n  const w = new Wind('asd')\r\n  w.setMsg('You have won gold')\r\n}, 10000)\r\n*/\r\nconst render = new Render('lienzo')\r\nrender.add(new Picture({\r\n  src: './apple.png'\r\n}))\r\n\r\n/*\r\nimport { Render, Line, Circle, Color, Vector, Rect, Text } from './src/index'\r\nconst render = new Render('lienzo')\r\n\r\nlet balls = []\r\n\r\nclass _Circle extends Circle {\r\n  public vel: Vector = new Vector()\r\n  public acc: Vector = new Vector()\r\n  constructor (data) {\r\n    super(data)\r\n  }\r\n  addForce(f: Vector) {\r\n    this.acc.add(f)\r\n  }\r\n  update() {\r\n   // this.c.alpha = 5 / this.vel.mag()\r\n    //this.color = this.c.rgba()\r\n    this.position.add(this.vel)\r\n    this.vel.mult(0.75)\r\n    this.vel.add(this.acc)\r\n    this.acc.zero()\r\n  }\r\n}\r\n\r\nconst spacing = 35\r\n\r\nfor (let y = 0; y < 10; y++) {\r\n  for (let x = 0; x < 10; x++) {\r\n    const color = Color.random()\r\n    const circle = new _Circle({\r\n      position: new Vector((x * spacing) + 100, (spacing * y) + 100 ),\r\n      color: 'white',//color.rgb(),\r\n      z_index: 5\r\n    })\r\n    circle.c = color\r\n    balls.push(circle)\r\n    render.add(circle)\r\n  }\r\n}\r\n\r\nclass _Line extends Line{\r\n  public b1: _Circle\r\n  public b2: _Circle\r\n  public rest\r\n  public k = 0.0005\r\n\r\n  constructor (data) {\r\n    super({\r\n      start: data.start.position,\r\n      end: data.end.position\r\n    })\r\n  \r\n    this.lineColor = data.lineColor\r\n    this.b1 = data.start\r\n    this.b2 = data.end\r\n    this.lineWidth = data.lineWidth\r\n    this.rest = Vector.distance(data.start.position, data.end.position)\r\n  }\r\n\r\n  update () {\r\n    \r\n    let v = Vector.sub(this.b1.position, this.b2.position)\r\n    v.normalize()\r\n    let x = (this.rest - Vector.distance(this.b1.position, this.b2.position))\r\n    v.mult(x)\r\n    v.mult(this.k)\r\n  \r\n    v.mult(0.25)\r\n\r\n    this.b1.addForce(v)\r\n    v.inverse()\r\n    this.b2.addForce(v)\r\n  }\r\n}\r\nlet links = []\r\n\r\nfor (let b1 = 0; b1 < balls.length; b1++) {\r\n  balls[b1].lines = []\r\n  for (let b2 = 0; b2 < balls.length; b2++) {\r\n    if (b1 != b2) {\r\n      const code = String(b1) + String(b2)\r\n      const iCode = String(b1) + String(b2)\r\n      if (!links.includes(code) || !links.includes(iCode)) {\r\n        const line = new _Line({\r\n          start: balls[b1],\r\n          end: balls[b2],\r\n          lineColor: balls[b1].color,\r\n          lineWidth: 0.25\r\n        })\r\n        render.add(line)\r\n        balls[b1].lines.push({line, ball: balls[b2]})\r\n        links.push(code)\r\n        links.push(iCode)\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  balls[b1].mouseMove((mouse) => {\r\n    balls[b1].addForce(Vector.mult(Vector.normalize(Vector.sub(balls[b1].position, mouse)), 2))\r\n  })\r\n}\r\n\r\nrender.autoRender(() => {\r\n  balls.forEach(ball => {\r\n    ball.update()\r\n    ball.lines.forEach((line) => {\r\n      \r\n      line.line.end = Vector.sub(line.ball.position, ball.position)\r\n      line.line.update()\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\nimport { Render, Color, Vector, Rect, Text } from './src/index'\r\n\r\nconst render = new Render('lienzo', 130, 100)\r\nconst scale = 1\r\nlet balls = []\r\nfor (let x = 0; x < render.getWidth() / scale; x++) {\r\n    for (let y = 0; y < render.getHeight() / scale; y++) {\r\n      let color = Color.random()\r\n     // color.setRed(255)\r\n      color.setBlue(255)\r\n      const ball = new Rect({\r\n        position: new Vector((x * scale), (y * scale)),\r\n        color: color.rgb(),\r\n        //radius: scale / 2\r\n         width: scale,\r\n         height: scale\r\n      })\r\n      ball.c = color\r\n      balls.push(ball)\r\n      render.add(ball)\r\n  }\r\n}\r\n\r\n\r\ndocument.addEventListener('mousemove', (e) => {\r\n  const mouse = new Vector(e.clientX, e.clientY)\r\n  balls.forEach((ball) => {\r\n    ball.color = `rgba(${ball.c.red}, ${ball.c.green}, ${ball.c.blue}, ${+mouse.distance(ball.position) / render.getWidth() * 4})`\r\n  })\r\n  render.render()\r\n})\r\n\r\nrender.add(new Text({\r\n  content: 'Hola mundo',\r\n  size: 24,\r\n  position: new Vector(300, 300)\r\n}))\r\n*/\r\n// render.autoRender()\r\n"},"lineCount":null}},"hash":"2093d656da4b2c6539287d504232c042","cacheData":{"env":{}},"id":4}